{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome Cadre De Vie SDK Android", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-cadre-de-vie-sdk-android", 
            "text": "", 
            "title": "Welcome Cadre De Vie SDK Android"
        }, 
        {
            "location": "/installation/", 
            "text": "Int\u00e9gration dans le projet\n\n\n\n\nCopier le fichier \ncdv-android-sdk.aar\n dans le dossier \nlibs\n de votre projet\n\n\nDans le \nbuild.gradle\n racine de votre projet ajouter la configuration suivante \u00e0 la section un dossier \nlibs\n si il n'est pas d\u00e9j\u00e0 pr\u00e9sent:\n\n\n\n\n\n allprojects {\n     repositories {\n         flatDir {\n             dirs 'libs'\n         }\n     }\n }\n\n\n\n\n\n\nDans le \nbuild.gradle\n de votre application rajouter la ligne suivante dans la section \ndependencies\n :\n\n\n\n\ndependencies {\n\n    compile (name:'cdv-android-sdk', ext:'aar')\n}\n\n\n\n\nAjout dans le Manifest\n\n\nDans la section \napplication\n de votre \nManifest.xml\n ajoutez les tags suivants:\n\n\n   \nmeta-data android:name=\nfr.cdv.baseUri\n android:value=\nhttps://api.proto.cadredevie.fr\n /\n\n        \nmeta-data android:name=\nfr.cdv.apiKey\n android:value=\nblHgqmtChWvo3RPg28ReqsJI\n /\n\n\n\n\n\nImport du SDK\n\n\nPour utilser le SDK il est n\u00e9cessaire d'importer le SDK depuis toutes les classes qui vont l'utiliser.\n\n\nimport fr.cdv.sdk.*;\n\n\n\n\nInitialisation du SDK\n\n\nAvant la premi\u00e8re utilisation du SDK il est n\u00e9cessaire de l'initialiser avec la m\u00e9thode suivante:\n\n\nCDVManager.sharedInstance().setup(getApplication());", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#integration-dans-le-projet", 
            "text": "Copier le fichier  cdv-android-sdk.aar  dans le dossier  libs  de votre projet  Dans le  build.gradle  racine de votre projet ajouter la configuration suivante \u00e0 la section un dossier  libs  si il n'est pas d\u00e9j\u00e0 pr\u00e9sent:   \n allprojects {\n     repositories {\n         flatDir {\n             dirs 'libs'\n         }\n     }\n }   Dans le  build.gradle  de votre application rajouter la ligne suivante dans la section  dependencies  :   dependencies {\n\n    compile (name:'cdv-android-sdk', ext:'aar')\n}", 
            "title": "Int\u00e9gration dans le projet"
        }, 
        {
            "location": "/installation/#ajout-dans-le-manifest", 
            "text": "Dans la section  application  de votre  Manifest.xml  ajoutez les tags suivants:      meta-data android:name= fr.cdv.baseUri  android:value= https://api.proto.cadredevie.fr  / \n         meta-data android:name= fr.cdv.apiKey  android:value= blHgqmtChWvo3RPg28ReqsJI  /", 
            "title": "Ajout dans le Manifest"
        }, 
        {
            "location": "/installation/#import-du-sdk", 
            "text": "Pour utilser le SDK il est n\u00e9cessaire d'importer le SDK depuis toutes les classes qui vont l'utiliser.  import fr.cdv.sdk.*;", 
            "title": "Import du SDK"
        }, 
        {
            "location": "/installation/#initialisation-du-sdk", 
            "text": "Avant la premi\u00e8re utilisation du SDK il est n\u00e9cessaire de l'initialiser avec la m\u00e9thode suivante:  CDVManager.sharedInstance().setup(getApplication());", 
            "title": "Initialisation du SDK"
        }, 
        {
            "location": "/concepts/", 
            "text": "L'API CadreDeVie permet de manipuler les entit\u00e9s suivantes:\n\n\n\n\nCDVUser\n : Un utilisateur identifi\u00e9 de l'API\n\n\nCDVContact\n : Des coordonn\u00e9es de contact\n\n\nCDVProperty\n: un lieu\n\n\nCDVAlert\n: une alerte cr\u00e9\u00e9e par un \nCDVUser\n pour \u00eatre alert\u00e9 sur une \nCDVProperty\n \n\n\nCDVPOI\n: des points d'int\u00e9r\u00eats (\u00e9coles, commerces...)", 
            "title": "Concepts"
        }, 
        {
            "location": "/login/", 
            "text": "Certains op\u00e9ration sur l'API demandent \u00e0 l'utilisateur d'\u00eatre logg\u00e9. Ces op\u00e9rations sont:\n\n\n\n\nEditer un utilisateur\n\n\nAvoir sa propre fiche utilisateur\n\n\nG\u00e9rer les favoris\n\n\nG\u00e9rer les invisibles (c-a-d les Properties que l'utilisateur ne veux plus voir dans ses futures recherches)\n\n\nG\u00e9rer les POIs\n\n\nG\u00e9rer les projets\n\n\nG\u00e9rer les alertes\n\n\n\n\nCr\u00e9ation d'un utilisateur\n\n\nPour cr\u00e9er un nouvel utilisateur il faut initialiser une instance de CDVUser, puis appeller la m\u00e9thode createUser() du CDVManager\n\n\n\n CDVUser newUser = new CDVUser();\n            newUser.setEmail(\nuser@mondomain.com\n);\n            newUser.setPassword(\npassword\n);\n            newUser.setFirstName(\nJeanMichel\n);\n\n            new CDVManager.CreateUserTask(newUser, new CDVManager.UserResponseHandler() {\n\n                @Override\n                public void result(CDVException e, CDVUser _cdvUser) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nCreate New User Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(\nUser created : \n + _cdvUser.dictionary());\n                    }\n                }\n            }).execute(); \n\n\n\n\n\nLes param\u00e8tres disponibles sont:\n\n\n\n\nusername\n\n\nemail\n\n\npassword\n\n\ncivility\n\n\nfirst_name\n\n\nlast_name\n\n\nmobile\n\n\nbirth_date\n\n\nlocale\n\n\naddress_line_1\n\n\naddress_line_2\n\n\nzip\n\n\ncity\n\n\n\n\nModification d'un utilisateur\n\n\n\n CDVUser _cdvUser = new CDVUser();\n            _cdvUser.setFirstName(\nJean-Michel \n + new Date());\n\n            new CDVManager.UpdateUserTask(_cdvUser, new CDVManager.NoResponseHandler() {\n\n                @Override\n                public void result(CDVException e) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nUpdate User Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(\nUser updated !\n);\n                    }\n                }\n            }).execute();\n\n\n\n\n\nLogin\n\n\n\n new CDVManager.LoginTask(\nuser@mondomain.com\n, \nmonpassword\n, new CDVManager.LoginResponseHandler() {\n\n                @Override\n                public void result(CDVException e, CDVUser _cdvUser) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nLogin Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(\nUser connected : \n + _cdvUser.dictionary());\n                    }\n                }\n            }).execute();\n\n\n\n\n\n\nR\u00e9cup\u00e9rer les d\u00e9tails sur l'utilisateur logg\u00e9\n\n\n\n new CDVManager.MeTask(new CDVManager.UserResponseHandler() {\n\n    @Override\n    public void result(CDVException e, CDVUser _cdvUser) {\n        if (e != null \n e.getNativeException() == null) {\n            System.out.println(\nLogin Error : \n + e.getErrorMessage());\n        } else if (e != null \n e.getNativeException() != null) {\n            e.getNativeException().printStackTrace();\n        } else {\n            System.out.println(\nUser connected : \n + _cdvUser.dictionary());\n        }\n    }\n}).execute();", 
            "title": "Login"
        }, 
        {
            "location": "/login/#creation-dun-utilisateur", 
            "text": "Pour cr\u00e9er un nouvel utilisateur il faut initialiser une instance de CDVUser, puis appeller la m\u00e9thode createUser() du CDVManager  \n CDVUser newUser = new CDVUser();\n            newUser.setEmail( user@mondomain.com );\n            newUser.setPassword( password );\n            newUser.setFirstName( JeanMichel );\n\n            new CDVManager.CreateUserTask(newUser, new CDVManager.UserResponseHandler() {\n\n                @Override\n                public void result(CDVException e, CDVUser _cdvUser) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Create New User Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println( User created :   + _cdvUser.dictionary());\n                    }\n                }\n            }).execute();   Les param\u00e8tres disponibles sont:   username  email  password  civility  first_name  last_name  mobile  birth_date  locale  address_line_1  address_line_2  zip  city", 
            "title": "Cr\u00e9ation d'un utilisateur"
        }, 
        {
            "location": "/login/#modification-dun-utilisateur", 
            "text": "CDVUser _cdvUser = new CDVUser();\n            _cdvUser.setFirstName( Jean-Michel   + new Date());\n\n            new CDVManager.UpdateUserTask(_cdvUser, new CDVManager.NoResponseHandler() {\n\n                @Override\n                public void result(CDVException e) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Update User Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println( User updated ! );\n                    }\n                }\n            }).execute();", 
            "title": "Modification d'un utilisateur"
        }, 
        {
            "location": "/login/#login", 
            "text": "new CDVManager.LoginTask( user@mondomain.com ,  monpassword , new CDVManager.LoginResponseHandler() {\n\n                @Override\n                public void result(CDVException e, CDVUser _cdvUser) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Login Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println( User connected :   + _cdvUser.dictionary());\n                    }\n                }\n            }).execute();", 
            "title": "Login"
        }, 
        {
            "location": "/login/#recuperer-les-details-sur-lutilisateur-logge", 
            "text": "new CDVManager.MeTask(new CDVManager.UserResponseHandler() {\n\n    @Override\n    public void result(CDVException e, CDVUser _cdvUser) {\n        if (e != null   e.getNativeException() == null) {\n            System.out.println( Login Error :   + e.getErrorMessage());\n        } else if (e != null   e.getNativeException() != null) {\n            e.getNativeException().printStackTrace();\n        } else {\n            System.out.println( User connected :   + _cdvUser.dictionary());\n        }\n    }\n}).execute();", 
            "title": "R\u00e9cup\u00e9rer les d\u00e9tails sur l'utilisateur logg\u00e9"
        }, 
        {
            "location": "/property_search/", 
            "text": "L'API permet de rechercher les properties correspondant \u00e0 des crit\u00e8res g\u00e9ographiques, ou des crit\u00e8res de la property (surface, nombre de pi\u00e8ces...)\n\n\nCrit\u00e8res de recherche\n\n\nPour effectuer une recheche il faut cr\u00e9er un objet de type CDVPropertySearch et lui d\u00e9finir les attributs \u00e0 rechercher. \n\n\nIl est possible de limiter une recheche sur des crit\u00e8res g\u00e9ographiques en utilisant des polygones, une distance (en kilom\u00e8tres) autour d'un point, ou une bounding box\n\n\n\n CDVPropertySearch _propertiesSearch = new CDVPropertySearch();\n\n _propertiesSearch.setPageSize(10);\n         _propertiesSearch.setService(CDVPropertyService.buy);\n         _propertiesSearch.setParentTypes(new ArrayList\nString\n(Arrays.asList(\nhouse\n, \napartment\n)));\n         _propertiesSearch.setNbRooms(new ArrayList\nDouble\n(Arrays.asList(new Double(2), new Double(3))));\n\n CDVGeoPoint firstPoint = new CDVGeoPoint();\n    firstPoint.setLat(52.36947753602144);\n    firstPoint.setLng(-7.237292528124954);\n    CDVGeoPoint secondPoint = new CDVGeoPoint();\n    secondPoint.setLat(40.036761141167766);\n    secondPoint.setLng(11.637219190625046);\n\n    CDVGeoBoundingBox boundingBox = new CDVGeoBoundingBox();\n    boundingBox.getPoints().add(firstPoint);\n    boundingBox.getPoints().add(secondPoint);\n    _propertiesSearch.setGeoBoundingBox(boundingBox);\n\n\n\n\n\n\nRecherche pour obtenir une liste\n\n\nUne fois l'objet CDVPropertySearch cr\u00e9\u00e9 il est possible de recherche les properties correspondantes\n\n\n       new CDVManager.PropertiesSearchTask(_propertiesSearch, new CDVManager.PropertySearchResponseHandler() {\n\n            @Override\n            public void result(CDVException e, ArrayList\nCDVProperty\n properties, int count) {\n                if (e != null \n e.getNativeException() == null) {\n                    System.out.println(\nSearch Properties Error : \n + e.getErrorMessage());\n                } else if (e != null \n e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(properties.size() + \n properties returned with search on a total of \n + count + \n properties\n);\n\n\n                }\n            }\n        }).execute();\n\n\n\n\n\nPour obtenir les r\u00e9sultats suivants (c-a-d la page suivante) il faut incr\u00e9menter la property \ncdvPage\n de l'objet \nCDVPropertySearch\n et relancer la recherche. La premi\u00e8re page a l'index \n1\n, la seconde page a l'index \n2\n, etc-etc...\n\n\n\n     propertiesSearch.cdvPage = 2\n\n\n\n\n\nRecherche pour obtenir des cluster \u00e0 fin d'affichage sur une carte\n\n\nnew CDVManager.MapPropertiesTask(_propertiesSearch, new CDVManager.MapPropertiesResponseHandler() {\n\n                @Override\n                public void result(CDVException e, ArrayList\nCDVCluster\n clusters, int count) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nMap Clusters Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(clusters.size() + \n clusters returned with search on a total of \n+ count +\n properties\n);\n                    }\n                }\n            }).execute();\n\n\n\n\nRecherche du nombre de properties\n\n\nCette recherche permet d'obtenir uniquement le nombre de properties correspondant \u00e0 une recherche, et non d\u00e9tails sur les properties\n\n\n new CDVManager.CountPropertiesTask(_propertiesSearch, new CDVManager.CountPropertiesResponseHandler() {\n\n                @Override\n                public void result(CDVException e, int count) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nMap Clusters Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(count + \n properties\n);\n                    }\n                }\n            }).execute();\n\n\n\n\nRecherche des propri\u00e9t\u00e9s par ID\n\n\n\nArrayList\nInteger\n _propertiesIds = new ArrayList\nInteger\n();\n _propertiesIds.add(42);\n _propertiesIds.add(686);\n\n new CDVManager.PropertiesByIdsTask(_propertiesIds, new CDVManager.PropertiesResponseHandler() {\n\n                            @Override\n                            public void result(CDVException e, ArrayList\nCDVProperty\n properties2) {\n                                if (e != null \n e.getNativeException() == null) {\n                                    System.out.println(\nSearch Properties Error : \n + e.getErrorMessage());\n                                } else if (e != null \n e.getNativeException() != null) {\n                                    e.getNativeException().printStackTrace();\n                                } else {\n                                    System.out.println(properties2.size() + \n properties returned by ids\n);\n                                    for (CDVProperty _property: properties2) {\n                                        System.out.println(_property.dictionary());\n                                    }\n                                }\n                            }\n                        }).execute();\n\n\n\n\n\nGeo Precision (param\u00e9trage)\n\n\nThe GeoHashgrid precision can either be defined in terms of the integer precision levels mentioned in the Elastic Search documentation.\nValues outside of [1,12] will be rejected.\nAlternatively, the precision level can be approximated from a distance measure like \"1km\", \"10m\"\n(cf. https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html)\n\n\npropertiesSearch.cdvGeoPrecision = \n2\n\n\n/* 2 types of possible values (String):\n * - GeoHashgrid code: '1', '2', ..., '12'\n * - Distances: '1m', '10km'\n */\n\n\n\n\n\nCDVProperty.cdvOtherDatas (donn\u00e9es complementaires)\n\n\nChaque propri\u00e9t\u00e9 comprend une propri\u00e9t\u00e9 '.cdvOtherDatas' qui regroupe tout les informations de l'api non accessible directement via les autres propri\u00e9t\u00e9 de l'objet CDVProperty.\n\n\nCi-desssous le model de donn\u00e9e tel que retourn\u00e9 par l'api:\n\n\n\n{\n  id (integer): CDV's DB reference ,\n  flow_id (integer): Flux provider reference ,\n  reference (string, optional): Reference of the property ,\n  title (string, optional): Original title (if exists) ,\n  description (string, optional): Long text description ,\n  lot (boolean, optional): Belongs to a program? ,\n  area (number, optional): Normalized area ,\n  price (number, optional): Net price ,\n  price_per_meter (number, optional): Calculated ratio ,\n  rent (number, optional): Rent price ,\n  images (Array[string], optional): List of images' urls ,\n  type_label (string, optional): Property type ()in french) ,\n  nb_rooms (integer, optional): Number of standard rooms ,\n  nb_bed_rooms (integer, optional): Number of standard bedrooms ,\n  location (location, optional): GPS coordinates ,\n  city (string, optional): City location of the propery ,\n  zip (string, optional): Zip code of the city ,\n  virtual_visit (string, optional): Link to catch the VV ,\n  ad_url (string, optional): Link to the original ad ,\n  stay_area (integer, optional): Area of the living room (salon) ,\n  year_of_construction (integer, optional): For new constructions ,\n  exposure (string, optional): Free description ,\n  kitchen (string, optional): None(empty) or kitchen type ,\n  nb_bathrooms (integer, optional): Number of standard BATHrooms ,\n  nb_water_rooms (integer, optional): Water rooms aren't bath or WC ,\n  attic (integer, optional): None or one ,\n  terrace (integer, optional): None or several ,\n  nearby_transport (string, optional): Free description ,\n  nearby_school (string, optional): Free description ,\n  nearby_commerce (string, optional): Free description ,\n  heating_type (string, optional): Free description ,\n  nb_floors (integer, optional): Number of inside floors ,\n  elevator (boolean, optional): Elevator? ,\n  nb_parkings (integer, optional): Private parkings ,\n  parking_type (string, optional): Free description ,\n  field_area (integer, optional): Area of the parcel of land ,\n  style (string, optional): Style of the construction ,\n  nb_levels (boolean, optional): Number of levels of the building ,\n  nb_ground_floor_rooms (integer, optional): Explicit ,\n  nb_wcs (integer, optional): Not bath- or water-rooms ,\n  basement (boolean, optional): Level 0? ,\n  veranda (boolean, optional): Veranda? ,\n  garage (boolean, optional): Garage? (closed parking) ,\n  nb_garage_slots (integer, optional): Private parkings inside the garage ,\n  outbuildings (string, optional): Free description ,\n  swimming_pool (boolean, optional): Swimming pool? ,\n  intercom (boolean, optional): Intercomm? ,\n  green_spaces (boolean, optional): Green spaces? ,\n  loggia (boolean, optional): Loggia? ,\n  balcony (boolean, optional): Balcony? ,\n  private_garden (boolean, optional): Private garden? ,\n  heating (string, optional): Free description ,\n  heating_energy (string, optional): Free description ,\n  heating_mechanism (string, optional): Free description ,\n  inner_state (string, optional): Free description ,\n  dpe_label_gaz (string, optional): Standard DPE's label ,\n  dpe_value_gaz (number, optional): Official value ,\n  dpe_label_consumption (string, optional): Standard Consumption's label ,\n  dpe_value_consumption (number, optional): Official value ,\n  update_at (date, optional): Last update of the ad ,\n  monthly_rent_inc_charge (number, optional): Monthly rent including charges ,\n  inventory_fees (number, optional): Cost of the inventory for a rent ,\n  tenancy_law (number, optional): Cost of the tenancy law ,\n  payer_fees (string, optional): Who pay the fees? French label \nvendeur\n or \nacqu\u00e9reur\n ,\n  price_excl_fees (number, optional): Price excluding the fees ,\n  seller_fees (boolean, optional): Must the seller pay the fees? ,\n  buyer_fees (boolean, optional): Must the buyer pay the fees? ,\n  percentage_seller_fees (number, optional): Percentage value of the seller's fees ,\n  percentage_buyer_fees (number, optional): Percentage value of the buyer's fees ,\n  additionnal_rent (number, optional): Cost of the additinnal rent ,\n  modality_rental_cost_recovery (string, optional): Free description ,\n  url_public_tariff (string, optional): Link to the rate scale of the realtor ,\n  agency (contact, optional),\n  developer (contact, optional)\n}\nlocation {\n  lat (number),\n  lng (number)\n}\ncontact {\n  flow_id (integer),\n  name (string, optional),\n  reg_name (string, optional),\n  reg_siret (string, optional),\n  email (string, optional),\n  phone (string, optional),\n  street (string, optional),\n  zip (string, optional),\n  city (string, optional),\n  country (string, optional)\n}", 
            "title": "Recherche de properties"
        }, 
        {
            "location": "/property_search/#criteres-de-recherche", 
            "text": "Pour effectuer une recheche il faut cr\u00e9er un objet de type CDVPropertySearch et lui d\u00e9finir les attributs \u00e0 rechercher.   Il est possible de limiter une recheche sur des crit\u00e8res g\u00e9ographiques en utilisant des polygones, une distance (en kilom\u00e8tres) autour d'un point, ou une bounding box  \n CDVPropertySearch _propertiesSearch = new CDVPropertySearch();\n\n _propertiesSearch.setPageSize(10);\n         _propertiesSearch.setService(CDVPropertyService.buy);\n         _propertiesSearch.setParentTypes(new ArrayList String (Arrays.asList( house ,  apartment )));\n         _propertiesSearch.setNbRooms(new ArrayList Double (Arrays.asList(new Double(2), new Double(3))));\n\n CDVGeoPoint firstPoint = new CDVGeoPoint();\n    firstPoint.setLat(52.36947753602144);\n    firstPoint.setLng(-7.237292528124954);\n    CDVGeoPoint secondPoint = new CDVGeoPoint();\n    secondPoint.setLat(40.036761141167766);\n    secondPoint.setLng(11.637219190625046);\n\n    CDVGeoBoundingBox boundingBox = new CDVGeoBoundingBox();\n    boundingBox.getPoints().add(firstPoint);\n    boundingBox.getPoints().add(secondPoint);\n    _propertiesSearch.setGeoBoundingBox(boundingBox);", 
            "title": "Crit\u00e8res de recherche"
        }, 
        {
            "location": "/property_search/#recherche-pour-obtenir-une-liste", 
            "text": "Une fois l'objet CDVPropertySearch cr\u00e9\u00e9 il est possible de recherche les properties correspondantes         new CDVManager.PropertiesSearchTask(_propertiesSearch, new CDVManager.PropertySearchResponseHandler() {\n\n            @Override\n            public void result(CDVException e, ArrayList CDVProperty  properties, int count) {\n                if (e != null   e.getNativeException() == null) {\n                    System.out.println( Search Properties Error :   + e.getErrorMessage());\n                } else if (e != null   e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(properties.size() +   properties returned with search on a total of   + count +   properties );\n\n\n                }\n            }\n        }).execute();  Pour obtenir les r\u00e9sultats suivants (c-a-d la page suivante) il faut incr\u00e9menter la property  cdvPage  de l'objet  CDVPropertySearch  et relancer la recherche. La premi\u00e8re page a l'index  1 , la seconde page a l'index  2 , etc-etc...  \n     propertiesSearch.cdvPage = 2", 
            "title": "Recherche pour obtenir une liste"
        }, 
        {
            "location": "/property_search/#recherche-pour-obtenir-des-cluster-a-fin-daffichage-sur-une-carte", 
            "text": "new CDVManager.MapPropertiesTask(_propertiesSearch, new CDVManager.MapPropertiesResponseHandler() {\n\n                @Override\n                public void result(CDVException e, ArrayList CDVCluster  clusters, int count) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Map Clusters Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(clusters.size() +   clusters returned with search on a total of  + count +  properties );\n                    }\n                }\n            }).execute();", 
            "title": "Recherche pour obtenir des cluster \u00e0 fin d'affichage sur une carte"
        }, 
        {
            "location": "/property_search/#recherche-du-nombre-de-properties", 
            "text": "Cette recherche permet d'obtenir uniquement le nombre de properties correspondant \u00e0 une recherche, et non d\u00e9tails sur les properties   new CDVManager.CountPropertiesTask(_propertiesSearch, new CDVManager.CountPropertiesResponseHandler() {\n\n                @Override\n                public void result(CDVException e, int count) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Map Clusters Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(count +   properties );\n                    }\n                }\n            }).execute();", 
            "title": "Recherche du nombre de properties"
        }, 
        {
            "location": "/property_search/#recherche-des-proprietes-par-id", 
            "text": "ArrayList Integer  _propertiesIds = new ArrayList Integer ();\n _propertiesIds.add(42);\n _propertiesIds.add(686);\n\n new CDVManager.PropertiesByIdsTask(_propertiesIds, new CDVManager.PropertiesResponseHandler() {\n\n                            @Override\n                            public void result(CDVException e, ArrayList CDVProperty  properties2) {\n                                if (e != null   e.getNativeException() == null) {\n                                    System.out.println( Search Properties Error :   + e.getErrorMessage());\n                                } else if (e != null   e.getNativeException() != null) {\n                                    e.getNativeException().printStackTrace();\n                                } else {\n                                    System.out.println(properties2.size() +   properties returned by ids );\n                                    for (CDVProperty _property: properties2) {\n                                        System.out.println(_property.dictionary());\n                                    }\n                                }\n                            }\n                        }).execute();", 
            "title": "Recherche des propri\u00e9t\u00e9s par ID"
        }, 
        {
            "location": "/property_search/#geo-precision-parametrage", 
            "text": "The GeoHashgrid precision can either be defined in terms of the integer precision levels mentioned in the Elastic Search documentation.\nValues outside of [1,12] will be rejected.\nAlternatively, the precision level can be approximated from a distance measure like \"1km\", \"10m\"\n(cf. https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html)  propertiesSearch.cdvGeoPrecision =  2 \n\n/* 2 types of possible values (String):\n * - GeoHashgrid code: '1', '2', ..., '12'\n * - Distances: '1m', '10km'\n */", 
            "title": "Geo Precision (param\u00e9trage)"
        }, 
        {
            "location": "/property_search/#cdvpropertycdvotherdatas-donnees-complementaires", 
            "text": "Chaque propri\u00e9t\u00e9 comprend une propri\u00e9t\u00e9 '.cdvOtherDatas' qui regroupe tout les informations de l'api non accessible directement via les autres propri\u00e9t\u00e9 de l'objet CDVProperty.  Ci-desssous le model de donn\u00e9e tel que retourn\u00e9 par l'api:  \n{\n  id (integer): CDV's DB reference ,\n  flow_id (integer): Flux provider reference ,\n  reference (string, optional): Reference of the property ,\n  title (string, optional): Original title (if exists) ,\n  description (string, optional): Long text description ,\n  lot (boolean, optional): Belongs to a program? ,\n  area (number, optional): Normalized area ,\n  price (number, optional): Net price ,\n  price_per_meter (number, optional): Calculated ratio ,\n  rent (number, optional): Rent price ,\n  images (Array[string], optional): List of images' urls ,\n  type_label (string, optional): Property type ()in french) ,\n  nb_rooms (integer, optional): Number of standard rooms ,\n  nb_bed_rooms (integer, optional): Number of standard bedrooms ,\n  location (location, optional): GPS coordinates ,\n  city (string, optional): City location of the propery ,\n  zip (string, optional): Zip code of the city ,\n  virtual_visit (string, optional): Link to catch the VV ,\n  ad_url (string, optional): Link to the original ad ,\n  stay_area (integer, optional): Area of the living room (salon) ,\n  year_of_construction (integer, optional): For new constructions ,\n  exposure (string, optional): Free description ,\n  kitchen (string, optional): None(empty) or kitchen type ,\n  nb_bathrooms (integer, optional): Number of standard BATHrooms ,\n  nb_water_rooms (integer, optional): Water rooms aren't bath or WC ,\n  attic (integer, optional): None or one ,\n  terrace (integer, optional): None or several ,\n  nearby_transport (string, optional): Free description ,\n  nearby_school (string, optional): Free description ,\n  nearby_commerce (string, optional): Free description ,\n  heating_type (string, optional): Free description ,\n  nb_floors (integer, optional): Number of inside floors ,\n  elevator (boolean, optional): Elevator? ,\n  nb_parkings (integer, optional): Private parkings ,\n  parking_type (string, optional): Free description ,\n  field_area (integer, optional): Area of the parcel of land ,\n  style (string, optional): Style of the construction ,\n  nb_levels (boolean, optional): Number of levels of the building ,\n  nb_ground_floor_rooms (integer, optional): Explicit ,\n  nb_wcs (integer, optional): Not bath- or water-rooms ,\n  basement (boolean, optional): Level 0? ,\n  veranda (boolean, optional): Veranda? ,\n  garage (boolean, optional): Garage? (closed parking) ,\n  nb_garage_slots (integer, optional): Private parkings inside the garage ,\n  outbuildings (string, optional): Free description ,\n  swimming_pool (boolean, optional): Swimming pool? ,\n  intercom (boolean, optional): Intercomm? ,\n  green_spaces (boolean, optional): Green spaces? ,\n  loggia (boolean, optional): Loggia? ,\n  balcony (boolean, optional): Balcony? ,\n  private_garden (boolean, optional): Private garden? ,\n  heating (string, optional): Free description ,\n  heating_energy (string, optional): Free description ,\n  heating_mechanism (string, optional): Free description ,\n  inner_state (string, optional): Free description ,\n  dpe_label_gaz (string, optional): Standard DPE's label ,\n  dpe_value_gaz (number, optional): Official value ,\n  dpe_label_consumption (string, optional): Standard Consumption's label ,\n  dpe_value_consumption (number, optional): Official value ,\n  update_at (date, optional): Last update of the ad ,\n  monthly_rent_inc_charge (number, optional): Monthly rent including charges ,\n  inventory_fees (number, optional): Cost of the inventory for a rent ,\n  tenancy_law (number, optional): Cost of the tenancy law ,\n  payer_fees (string, optional): Who pay the fees? French label  vendeur  or  acqu\u00e9reur  ,\n  price_excl_fees (number, optional): Price excluding the fees ,\n  seller_fees (boolean, optional): Must the seller pay the fees? ,\n  buyer_fees (boolean, optional): Must the buyer pay the fees? ,\n  percentage_seller_fees (number, optional): Percentage value of the seller's fees ,\n  percentage_buyer_fees (number, optional): Percentage value of the buyer's fees ,\n  additionnal_rent (number, optional): Cost of the additinnal rent ,\n  modality_rental_cost_recovery (string, optional): Free description ,\n  url_public_tariff (string, optional): Link to the rate scale of the realtor ,\n  agency (contact, optional),\n  developer (contact, optional)\n}\nlocation {\n  lat (number),\n  lng (number)\n}\ncontact {\n  flow_id (integer),\n  name (string, optional),\n  reg_name (string, optional),\n  reg_siret (string, optional),\n  email (string, optional),\n  phone (string, optional),\n  street (string, optional),\n  zip (string, optional),\n  city (string, optional),\n  country (string, optional)\n}", 
            "title": "CDVProperty.cdvOtherDatas (donn\u00e9es complementaires)"
        }, 
        {
            "location": "/alerts/", 
            "text": "Une alerte permet \u00e0 l'utilisateur d'\u00eatre notifi\u00e9 par email quand des biens correspondants \u00e0 ses crit\u00e8res sont ajout\u00e9s.\n\n\nCr\u00e9er une nouvelle alerte\n\n\nfinal CDVAlert _cdvNewAlert = new CDVAlert();\n            _cdvNewAlert.setName(\nNouvelle alerte\n);\n            _cdvNewAlert.setMinPrice(new Double(90000));\n            _cdvNewAlert.setMinArea(new Double(90));\n            _cdvNewAlert.setEmail(CDVManager.getConnectedUser().getEmail());\n\nnew CDVManager.CreateAlertTask(_cdvNewAlert, new CDVManager.AlertResponseHandler() {\n    @Override\n        public void result(CDVException e, CDVAlert _cdvAlert) {\n            if (e != null \n e.getNativeException() == null) {\n                                    System.out.println(\nCreate Alert Error : \n + e.getErrorMessage());\n                                } else if (e != null \n e.getNativeException() != null) {\n                                    e.getNativeException().printStackTrace();\n                                } else {\n                                    System.out.println(\nAlert created : \n + _cdvAlert.dictionary());\n                }\n                            }\n                        }).execute();\n\n\n\n\n\nRecherche les alertes actives\n\n\n  new CDVManager.GetAlertsTask(new CDVManager.AlertsResponseHandler() {\n\n      @Override\n      public void result(CDVException e, ArrayList\nCDVAlert\n _cdvAlerts) {\n          if (e != null \n e.getNativeException() == null) {\n              System.out.println(\nGet alerts Error : \n + e.getErrorMessage());\n          } else if (e != null \n e.getNativeException() != null) {\n              e.getNativeException().printStackTrace();\n          } else {\n              System.out.println(_cdvAlerts.size() + \n alerts for User \n + CDVManager.getConnectedUser().getFirstName());\n          }\n      }\n  }).execute();\n\n\n\n\nSupprimer une alerte\n\n\n new CDVManager.GetAlertsTask(new CDVManager.AlertsResponseHandler() {\n\n@Override\npublic void result(CDVException e, ArrayList\nCDVAlert\n _cdvAlerts) {\n\n    CDVAlert    firstAlert = (CDVAlert) _cdvAlerts.toArray()[0];\n\n    new CDVManager.DeleteAlertTask(firstAlert, new CDVManager.NoResponseHandler() {\n        @Override\n        public void result(CDVException e) {\n            if (e != null \n e.getNativeException() == null) {\n                System.out.println(\nDelete alert Error : \n + e.getErrorMessage());\n            } else if (e != null \n e.getNativeException() != null) {\n                e.getNativeException().printStackTrace();\n            } else {\n                System.out.println(\nAlert deleted\n);\n            }\n        }\n    }).execute();", 
            "title": "Alertes"
        }, 
        {
            "location": "/alerts/#creer-une-nouvelle-alerte", 
            "text": "final CDVAlert _cdvNewAlert = new CDVAlert();\n            _cdvNewAlert.setName( Nouvelle alerte );\n            _cdvNewAlert.setMinPrice(new Double(90000));\n            _cdvNewAlert.setMinArea(new Double(90));\n            _cdvNewAlert.setEmail(CDVManager.getConnectedUser().getEmail());\n\nnew CDVManager.CreateAlertTask(_cdvNewAlert, new CDVManager.AlertResponseHandler() {\n    @Override\n        public void result(CDVException e, CDVAlert _cdvAlert) {\n            if (e != null   e.getNativeException() == null) {\n                                    System.out.println( Create Alert Error :   + e.getErrorMessage());\n                                } else if (e != null   e.getNativeException() != null) {\n                                    e.getNativeException().printStackTrace();\n                                } else {\n                                    System.out.println( Alert created :   + _cdvAlert.dictionary());\n                }\n                            }\n                        }).execute();", 
            "title": "Cr\u00e9er une nouvelle alerte"
        }, 
        {
            "location": "/alerts/#recherche-les-alertes-actives", 
            "text": "new CDVManager.GetAlertsTask(new CDVManager.AlertsResponseHandler() {\n\n      @Override\n      public void result(CDVException e, ArrayList CDVAlert  _cdvAlerts) {\n          if (e != null   e.getNativeException() == null) {\n              System.out.println( Get alerts Error :   + e.getErrorMessage());\n          } else if (e != null   e.getNativeException() != null) {\n              e.getNativeException().printStackTrace();\n          } else {\n              System.out.println(_cdvAlerts.size() +   alerts for User   + CDVManager.getConnectedUser().getFirstName());\n          }\n      }\n  }).execute();", 
            "title": "Recherche les alertes actives"
        }, 
        {
            "location": "/alerts/#supprimer-une-alerte", 
            "text": "new CDVManager.GetAlertsTask(new CDVManager.AlertsResponseHandler() {\n\n@Override\npublic void result(CDVException e, ArrayList CDVAlert  _cdvAlerts) {\n\n    CDVAlert    firstAlert = (CDVAlert) _cdvAlerts.toArray()[0];\n\n    new CDVManager.DeleteAlertTask(firstAlert, new CDVManager.NoResponseHandler() {\n        @Override\n        public void result(CDVException e) {\n            if (e != null   e.getNativeException() == null) {\n                System.out.println( Delete alert Error :   + e.getErrorMessage());\n            } else if (e != null   e.getNativeException() != null) {\n                e.getNativeException().printStackTrace();\n            } else {\n                System.out.println( Alert deleted );\n            }\n        }\n    }).execute();", 
            "title": "Supprimer une alerte"
        }, 
        {
            "location": "/favorites/", 
            "text": "Marquer une property comme favorites\n\n\nexistingProperty\n est une variable de type CDVProperty obtenue lors d'une recherche\n\n\n  new CDVManager.CreateFavoriteTask(existingProperty, new CDVManager.NoResponseHandler() {\n            @Override\n            public void result(CDVException e) {\n                if (e != null \n e.getNativeException() == null) {\n                    System.out.println(\nAdd Favorite Error : \n + e.getErrorMessage());\n                } else if (e != null \n e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(\nFavorite Property added\n);\n\n                }}}).execute();\n\n\n\n\n\nSupprimer un favori\n\n\nnew CDVManager.DeleteFavoriteTask(propertyToRemove, new CDVManager.NoResponseHandler() {\n                                        @Override\n                                        public void result(CDVException e) {\n                                            if (e != null \n e.getNativeException() == null) {\n                                                System.out.println(\nDelete Favorite Error : \n + e.getErrorMessage());\n                                            } else if (e != null \n e.getNativeException() != null) {\n                                                e.getNativeException().printStackTrace();\n                                            } else {\n                                                System.out.println(\nFavorite Property removed\n);\n                                            }\n                                        }\n                                    }).execute();", 
            "title": "Favoris"
        }, 
        {
            "location": "/favorites/#marquer-une-property-comme-favorites", 
            "text": "existingProperty  est une variable de type CDVProperty obtenue lors d'une recherche    new CDVManager.CreateFavoriteTask(existingProperty, new CDVManager.NoResponseHandler() {\n            @Override\n            public void result(CDVException e) {\n                if (e != null   e.getNativeException() == null) {\n                    System.out.println( Add Favorite Error :   + e.getErrorMessage());\n                } else if (e != null   e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println( Favorite Property added );\n\n                }}}).execute();", 
            "title": "Marquer une property comme favorites"
        }, 
        {
            "location": "/favorites/#supprimer-un-favori", 
            "text": "new CDVManager.DeleteFavoriteTask(propertyToRemove, new CDVManager.NoResponseHandler() {\n                                        @Override\n                                        public void result(CDVException e) {\n                                            if (e != null   e.getNativeException() == null) {\n                                                System.out.println( Delete Favorite Error :   + e.getErrorMessage());\n                                            } else if (e != null   e.getNativeException() != null) {\n                                                e.getNativeException().printStackTrace();\n                                            } else {\n                                                System.out.println( Favorite Property removed );\n                                            }\n                                        }\n                                    }).execute();", 
            "title": "Supprimer un favori"
        }, 
        {
            "location": "/poi/", 
            "text": "Cr\u00e9er un POI\n\n\nIl est n\u00e9cessaire de cr\u00e9er un objet de type \nCDVPOI\n puis de le sauver\n\n\n\n CDVPOI _newPOI = new CDVPOI();\n                         _newPOI.setName(\nMy POI \n + (pois.size()+1));\n                         _newPOI.setDescription(\nDescription of my POI \n + (pois.size()+1));\n                         _newPOI.setLat(48.8834611 + Math.random());\n                         _newPOI.setLng(2.2652248 + Math.random());\n                         _newPOI.setLink(\nbicycling\n);\n                         _newPOI.setChronoMaps(new ArrayList\nString\n(Arrays.asList(\ntime5\n, \ntime10\n, \ntime15\n)));\n\n\n\n       new CDVManager.CreatePOITask(_newPOI, new CDVManager.POIResponseHandler() {\n\n                                   @Override\n                                   public void result(CDVException e2, CDVPOI poi) {\n                                       if (e2 != null \n e2.getNativeException() == null) {\n                                           System.out.println(\nCreate POI Error : \n + e2.getErrorMessage());\n                                       } else if (e2 != null \n e2.getNativeException() != null) {\n                                           e2.getNativeException().printStackTrace();\n                                       } else {\n                                           System.out.println(\nPOI created \n + poi.dictionary());\n\n                                       }\n                                   }\n                               }).execute();\n\n\n\n\n\nR\u00e9cup\u00e9rer les POIs existants\n\n\n new CDVManager.GetPOIsTask(new CDVManager.POIsResponseHandler() {\n            @Override\n            public void result(CDVException e, ArrayList\nCDVPOI\n pois) {\n                if (e != null \n e.getNativeException() == null) {\n                    System.out.println(\nGet POIs Error : \n + e.getErrorMessage());\n                } else if (e != null \n e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(pois.size() + \n POIs\n);\n                }}}).execute();\n\n\n\n\nSupprimer un POI\n\n\n        new CDVManager.DeletePOITask(existingPoi, new CDVManager.NoResponseHandler() {\n            @Override\n            public void result(CDVException e) {\n                if (e != null \n e.getNativeException() == null) {\n                    System.out.println(\nDelete POI Error : \n + e.getErrorMessage());\n                } else if (e != null \n e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(\nPOI deleted\n);\n                }\n            }\n        }).execute();", 
            "title": "POIs"
        }, 
        {
            "location": "/poi/#creer-un-poi", 
            "text": "Il est n\u00e9cessaire de cr\u00e9er un objet de type  CDVPOI  puis de le sauver  \n CDVPOI _newPOI = new CDVPOI();\n                         _newPOI.setName( My POI   + (pois.size()+1));\n                         _newPOI.setDescription( Description of my POI   + (pois.size()+1));\n                         _newPOI.setLat(48.8834611 + Math.random());\n                         _newPOI.setLng(2.2652248 + Math.random());\n                         _newPOI.setLink( bicycling );\n                         _newPOI.setChronoMaps(new ArrayList String (Arrays.asList( time5 ,  time10 ,  time15 )));\n\n\n\n       new CDVManager.CreatePOITask(_newPOI, new CDVManager.POIResponseHandler() {\n\n                                   @Override\n                                   public void result(CDVException e2, CDVPOI poi) {\n                                       if (e2 != null   e2.getNativeException() == null) {\n                                           System.out.println( Create POI Error :   + e2.getErrorMessage());\n                                       } else if (e2 != null   e2.getNativeException() != null) {\n                                           e2.getNativeException().printStackTrace();\n                                       } else {\n                                           System.out.println( POI created   + poi.dictionary());\n\n                                       }\n                                   }\n                               }).execute();", 
            "title": "Cr\u00e9er un POI"
        }, 
        {
            "location": "/poi/#recuperer-les-pois-existants", 
            "text": "new CDVManager.GetPOIsTask(new CDVManager.POIsResponseHandler() {\n            @Override\n            public void result(CDVException e, ArrayList CDVPOI  pois) {\n                if (e != null   e.getNativeException() == null) {\n                    System.out.println( Get POIs Error :   + e.getErrorMessage());\n                } else if (e != null   e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(pois.size() +   POIs );\n                }}}).execute();", 
            "title": "R\u00e9cup\u00e9rer les POIs existants"
        }, 
        {
            "location": "/poi/#supprimer-un-poi", 
            "text": "new CDVManager.DeletePOITask(existingPoi, new CDVManager.NoResponseHandler() {\n            @Override\n            public void result(CDVException e) {\n                if (e != null   e.getNativeException() == null) {\n                    System.out.println( Delete POI Error :   + e.getErrorMessage());\n                } else if (e != null   e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println( POI deleted );\n                }\n            }\n        }).execute();", 
            "title": "Supprimer un POI"
        }
    ]
}