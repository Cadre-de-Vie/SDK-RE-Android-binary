{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome Cadre De Vie SDK Android", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-cadre-de-vie-sdk-android", 
            "text": "", 
            "title": "Welcome Cadre De Vie SDK Android"
        }, 
        {
            "location": "/installation/", 
            "text": "Int\u00e9gration dans le projet\n\n\n\n\nCopier le fichier \ncdv-android-sdk.aar\n dans le dossier \nlibs\n de votre projet\n\n\nDans le \nbuild.gradle\n racine de votre projet ajouter la configuration suivante \u00e0 la section un dossier \nlibs\n si il n'est pas d\u00e9j\u00e0 pr\u00e9sent:\n\n\n\n\n\n allprojects {\n     repositories {\n         flatDir {\n             dirs 'libs'\n         }\n     }\n }\n\n\n\n\n\n\nDans le \nbuild.gradle\n de votre application rajouter la ligne suivante dans la section \ndependencies\n :\n\n\n\n\ndependencies {\n\n    compile (name:'cdv-android-sdk', ext:'aar')\n}\n\n\n\n\nAjout dans le Manifest\n\n\nDans la section \napplication\n de votre \nManifest.xml\n ajoutez les tags suivants:\n\n\n   \nmeta-data android:name=\nfr.cdv.baseUri\n android:value=\nhttps://api.proto.cadredevie.fr\n /\n\n        \nmeta-data android:name=\nfr.cdv.apiKey\n android:value=\nblHgqmtChWvo3RPg28ReqsJI\n /\n\n\n\n\n\nImport du SDK\n\n\nPour utilser le SDK il est n\u00e9cessaire d'importer le SDK depuis toutes les classes qui vont l'utiliser.\n\n\nimport fr.cdv.sdk.*;\n\n\n\n\nInitialisation du SDK\n\n\nAvant la premi\u00e8re utilisation du SDK il est n\u00e9cessaire de l'initialiser avec la m\u00e9thode suivante:\n\n\nCDVManager.sharedInstance().setup(getApplication());", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#integration-dans-le-projet", 
            "text": "Copier le fichier  cdv-android-sdk.aar  dans le dossier  libs  de votre projet  Dans le  build.gradle  racine de votre projet ajouter la configuration suivante \u00e0 la section un dossier  libs  si il n'est pas d\u00e9j\u00e0 pr\u00e9sent:   \n allprojects {\n     repositories {\n         flatDir {\n             dirs 'libs'\n         }\n     }\n }   Dans le  build.gradle  de votre application rajouter la ligne suivante dans la section  dependencies  :   dependencies {\n\n    compile (name:'cdv-android-sdk', ext:'aar')\n}", 
            "title": "Int\u00e9gration dans le projet"
        }, 
        {
            "location": "/installation/#ajout-dans-le-manifest", 
            "text": "Dans la section  application  de votre  Manifest.xml  ajoutez les tags suivants:      meta-data android:name= fr.cdv.baseUri  android:value= https://api.proto.cadredevie.fr  / \n         meta-data android:name= fr.cdv.apiKey  android:value= blHgqmtChWvo3RPg28ReqsJI  /", 
            "title": "Ajout dans le Manifest"
        }, 
        {
            "location": "/installation/#import-du-sdk", 
            "text": "Pour utilser le SDK il est n\u00e9cessaire d'importer le SDK depuis toutes les classes qui vont l'utiliser.  import fr.cdv.sdk.*;", 
            "title": "Import du SDK"
        }, 
        {
            "location": "/installation/#initialisation-du-sdk", 
            "text": "Avant la premi\u00e8re utilisation du SDK il est n\u00e9cessaire de l'initialiser avec la m\u00e9thode suivante:  CDVManager.sharedInstance().setup(getApplication());", 
            "title": "Initialisation du SDK"
        }, 
        {
            "location": "/concepts/", 
            "text": "L'API CadreDeVie permet de manipuler les entit\u00e9s suivantes:\n\n\n\n\nCDVUser\n : Un utilisateur identifi\u00e9 de l'API\n\n\nCDVContact\n : Des coordonn\u00e9es de contact\n\n\nCDVProperty\n: un lieu\n\n\nCDVAlert\n: une alerte cr\u00e9\u00e9e par un \nCDVUser\n pour \u00eatre alert\u00e9 sur une \nCDVProperty\n \n\n\nCDVPOI\n: des points d'int\u00e9r\u00eats (\u00e9coles, commerces...)", 
            "title": "Concepts"
        }, 
        {
            "location": "/login/", 
            "text": "Certains op\u00e9ration sur l'API demandent \u00e0 l'utilisateur d'\u00eatre logg\u00e9. Ces op\u00e9rations sont:\n\n\n\n\nEditer un utilisateur\n\n\nAvoir sa propre fiche utilisateur\n\n\nG\u00e9rer les favoris\n\n\nG\u00e9rer les invisibles (c-a-d les Properties que l'utilisateur ne veux plus voir dans ses futures recherches)\n\n\nG\u00e9rer les POIs\n\n\nG\u00e9rer les projets\n\n\nG\u00e9rer les alertes\n\n\n\n\nCr\u00e9ation d'un utilisateur\n\n\nPour cr\u00e9er un nouvel utilisateur il faut initialiser une instance de CDVUser, puis appeller la m\u00e9thode createUser() du CDVManager\n\n\n\n CDVUser newUser = new CDVUser();\n            newUser.setEmail(\nuser@mondomain.com\n);\n            newUser.setPassword(\npassword\n);\n            newUser.setFirstName(\nJeanMichel\n);\n\n            new CDVManager.CreateUserTask(newUser, new CDVManager.UserResponseHandler() {\n\n                @Override\n                public void result(CDVException e, CDVUser _cdvUser) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nCreate New User Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(\nUser created : \n + _cdvUser.dictionary());\n                    }\n                }\n            }).execute(); \n\n\n\n\n\nLes param\u00e8tres disponibles sont:\n\n\n\n\nusername\n\n\nemail\n\n\npassword\n\n\ncivility\n - \"mr\" ou \"mrs\"\n\n\nfirst_name\n\n\nlast_name\n\n\nmobile\n\n\nbirth_date\n - Format ISO 8601 \"YYYY-MM-DD\" (ex: \"1999-01-25\")\n\n\nlocale\n- Format ISO 639 (ex: \"fr\")\n\n\naddress_line_1\n\n\naddress_line_2\n\n\nzip\n\n\ncity\n\n\n\n\nModification d'un utilisateur\n\n\n\n CDVUser _cdvUser = new CDVUser();\n            _cdvUser.setFirstName(\nJean-Michel \n + new Date());\n\n            new CDVManager.UpdateUserTask(_cdvUser, new CDVManager.NoResponseHandler() {\n\n                @Override\n                public void result(CDVException e) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nUpdate User Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(\nUser updated !\n);\n                    }\n                }\n            }).execute();\n\n\n\n\n\nLogin\n\n\nLe SDK permet \u00e0 l'utilisateur de se logger avec son adresse email, et son mot de passe.\n\n Updated upstream\nUne fois le login pass\u00e9e avec succ\u00e8s, le token utilisateur est envoy\u00e9 automatiquement par le SDK \u00e0 chaque appel, sans action du d\u00e9veloppeur.```\n=======\nUne fois le login pass\u00e9e avec succ\u00e8s, le token utilisateur est envoy\u00e9 automatiquement par le SDK \u00e0 chaque appel, sans action du d\u00e9veloppeur.\n\n\nLe SDK r\u00e9cup\u00e8re aussi le tokenK, pour usage de l'api K. Il peut \u00eatre renouvell\u00e9 via \nCDVManager.MeTask\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStashed changes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n new CDVManager.LoginTask(\nuser@mondomain.com\n, \nmonpassword\n, new CDVManager.LoginResponseHandler() {\n\n                @Override\n                public void result(CDVException e, CDVUser _cdvUser) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nLogin Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(\nUser connected : \n + _cdvUser.dictionary());\n                    }\n                }\n            }).execute();\n\n\n\n\n\n\nR\u00e9cup\u00e9rer les d\u00e9tails sur l'utilisateur logg\u00e9\n\n\nLe SDK r\u00e9cup\u00e8re aussi un nouveau tokenK, pour usage de l'api K\n\n\n\n new CDVManager.MeTask(new CDVManager.UserResponseHandler() {\n\n    @Override\n    public void result(CDVException e, CDVUser _cdvUser) {\n        if (e != null \n e.getNativeException() == null) {\n            System.out.println(\nLogin Error : \n + e.getErrorMessage());\n        } else if (e != null \n e.getNativeException() != null) {\n            e.getNativeException().printStackTrace();\n        } else {\n            System.out.println(\nUser connected : \n + _cdvUser.dictionary());\n        }\n    }\n}).execute();", 
            "title": "Login"
        }, 
        {
            "location": "/login/#creation-dun-utilisateur", 
            "text": "Pour cr\u00e9er un nouvel utilisateur il faut initialiser une instance de CDVUser, puis appeller la m\u00e9thode createUser() du CDVManager  \n CDVUser newUser = new CDVUser();\n            newUser.setEmail( user@mondomain.com );\n            newUser.setPassword( password );\n            newUser.setFirstName( JeanMichel );\n\n            new CDVManager.CreateUserTask(newUser, new CDVManager.UserResponseHandler() {\n\n                @Override\n                public void result(CDVException e, CDVUser _cdvUser) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Create New User Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println( User created :   + _cdvUser.dictionary());\n                    }\n                }\n            }).execute();   Les param\u00e8tres disponibles sont:   username  email  password  civility  - \"mr\" ou \"mrs\"  first_name  last_name  mobile  birth_date  - Format ISO 8601 \"YYYY-MM-DD\" (ex: \"1999-01-25\")  locale - Format ISO 639 (ex: \"fr\")  address_line_1  address_line_2  zip  city", 
            "title": "Cr\u00e9ation d'un utilisateur"
        }, 
        {
            "location": "/login/#modification-dun-utilisateur", 
            "text": "CDVUser _cdvUser = new CDVUser();\n            _cdvUser.setFirstName( Jean-Michel   + new Date());\n\n            new CDVManager.UpdateUserTask(_cdvUser, new CDVManager.NoResponseHandler() {\n\n                @Override\n                public void result(CDVException e) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Update User Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println( User updated ! );\n                    }\n                }\n            }).execute();", 
            "title": "Modification d'un utilisateur"
        }, 
        {
            "location": "/login/#login", 
            "text": "Le SDK permet \u00e0 l'utilisateur de se logger avec son adresse email, et son mot de passe.  Updated upstream\nUne fois le login pass\u00e9e avec succ\u00e8s, le token utilisateur est envoy\u00e9 automatiquement par le SDK \u00e0 chaque appel, sans action du d\u00e9veloppeur.```\n=======\nUne fois le login pass\u00e9e avec succ\u00e8s, le token utilisateur est envoy\u00e9 automatiquement par le SDK \u00e0 chaque appel, sans action du d\u00e9veloppeur.  Le SDK r\u00e9cup\u00e8re aussi le tokenK, pour usage de l'api K. Il peut \u00eatre renouvell\u00e9 via  CDVManager.MeTask         Stashed changes         \n new CDVManager.LoginTask( user@mondomain.com ,  monpassword , new CDVManager.LoginResponseHandler() {\n\n                @Override\n                public void result(CDVException e, CDVUser _cdvUser) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Login Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println( User connected :   + _cdvUser.dictionary());\n                    }\n                }\n            }).execute();", 
            "title": "Login"
        }, 
        {
            "location": "/login/#recuperer-les-details-sur-lutilisateur-logge", 
            "text": "Le SDK r\u00e9cup\u00e8re aussi un nouveau tokenK, pour usage de l'api K  \n new CDVManager.MeTask(new CDVManager.UserResponseHandler() {\n\n    @Override\n    public void result(CDVException e, CDVUser _cdvUser) {\n        if (e != null   e.getNativeException() == null) {\n            System.out.println( Login Error :   + e.getErrorMessage());\n        } else if (e != null   e.getNativeException() != null) {\n            e.getNativeException().printStackTrace();\n        } else {\n            System.out.println( User connected :   + _cdvUser.dictionary());\n        }\n    }\n}).execute();", 
            "title": "R\u00e9cup\u00e9rer les d\u00e9tails sur l'utilisateur logg\u00e9"
        }, 
        {
            "location": "/property_search/", 
            "text": "L'API permet de rechercher les properties correspondant \u00e0 des crit\u00e8res g\u00e9ographiques, ou des crit\u00e8res de la property (surface, nombre de pi\u00e8ces...)\n\n\nCrit\u00e8res de recherche\n\n\nPour effectuer une recheche, il faut cr\u00e9er un objet de type CDVPropertySearch et lui d\u00e9finir les attributs \u00e0 rechercher\n\n\nIl est possible de pr\u00e9ciser une recheche avec des crit\u00e8res g\u00e9ographiques en utilisant :\n\n\n\n\ndes cercles (cdvGeoDistance) : une distance en kilom\u00e8tres autour d'un point central en coordonn\u00e9es GPS (lat,lng). Voir ci-dessous l'autre usage de cdvGeoDistances en tant que filtre des r\u00e9sultats et non plus crit\u00e8re de recherche ;\n\n\ndes polygones (cdvGeoPolygons) : au moins 3 points en coordonn\u00e9es GPS (lat,lng).\n\n\n\n\nIl est possible de limiter les r\u00e9sultats retourn\u00e9s \u00e0 ceux visibles dans le viewport d'une carte :\n\n\n\n\nviewport (cdvGeoBoundingBox) : obligatoirement caract\u00e9ris\u00e9 par ses coordonn\u00e9es GPS, d'abord Nord-Est (lat,lng) puis Sud-Ouest (lat,lng).\n\n\n\n\nIl est possible de limiter une recheche sur des crit\u00e8res g\u00e9ographiques en utilisant des polygones, une distance (en kilom\u00e8tres) autour d'un point, ou une bounding box\n\n\n\n CDVPropertySearch _propertiesSearch = new CDVPropertySearch();\n\n _propertiesSearch.setPageSize(10);\n         _propertiesSearch.setService(CDVPropertyService.buy);\n         _propertiesSearch.setParentTypes(new ArrayList\nString\n(Arrays.asList(\nhouse\n, \napartment\n)));\n         _propertiesSearch.setNbRooms(new ArrayList\nDouble\n(Arrays.asList(new Double(2), new Double(3))));\n\n CDVGeoPoint firstPoint = new CDVGeoPoint();\n    firstPoint.setLat(52.36947753602144);\n    firstPoint.setLng(-7.237292528124954);\n    CDVGeoPoint secondPoint = new CDVGeoPoint();\n    secondPoint.setLat(40.036761141167766);\n    secondPoint.setLng(11.637219190625046);\n\n    CDVGeoBoundingBox boundingBox = new CDVGeoBoundingBox();\n    boundingBox.getPoints().add(firstPoint);\n    boundingBox.getPoints().add(secondPoint);\n    _propertiesSearch.setGeoBoundingBox(boundingBox);\n\n\n\n\n\n\nRecherche pour obtenir une liste\n\n\nUne fois l'objet CDVPropertySearch cr\u00e9\u00e9 il est possible de recherche les properties correspondantes\n\n\n       new CDVManager.PropertiesSearchTask(_propertiesSearch, new CDVManager.PropertySearchResponseHandler() {\n\n            @Override\n            public void result(CDVException e, ArrayList\nCDVProperty\n properties, int count) {\n                if (e != null \n e.getNativeException() == null) {\n                    System.out.println(\nSearch Properties Error : \n + e.getErrorMessage());\n                } else if (e != null \n e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(properties.size() + \n properties returned with search on a total of \n + count + \n properties\n);\n\n\n                }\n            }\n        }).execute();\n\n\n\n\n\nPour obtenir les r\u00e9sultats suivants (c-a-d la page suivante) il faut incr\u00e9menter la property \ncdvPage\n de l'objet \nCDVPropertySearch\n et relancer la recherche. La premi\u00e8re page a l'index \n1\n, la seconde page a l'index \n2\n, etc-etc...\n\n\n\n     propertiesSearch.cdvPage = 2\n\n\n\n\n\nRecherche pour obtenir des cluster \u00e0 fin d'affichage sur une carte\n\n\nnew CDVManager.MapPropertiesTask(_propertiesSearch, new CDVManager.MapPropertiesResponseHandler() {\n\n                @Override\n                public void result(CDVException e, ArrayList\nCDVCluster\n clusters, int count) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nMap Clusters Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(clusters.size() + \n clusters returned with search on a total of \n+ count +\n properties\n);\n                    }\n                }\n            }).execute();\n\n\n\n\nGeo Precision (param\u00e9trage)\n\n\nThe GeoHashgrid precision can either be defined in terms of the integer precision levels mentioned in the Elastic Search documentation.\nValues outside of [1,12] will be rejected.\nAlternatively, the precision level can be approximated from a distance measure like \"1km\", \"10m\"\n(cf. https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html)\n\n\nLa pr\u00e9csion du regroupement par cluster, maillage ou fonction \nGeoHashgrid\n, d\u00e9finie de 3 fa\u00e7ons :\n\n\n\n\nla valeur z\u00e9ro \"0\" : indique que le calcul des clusters doit \u00eatre d\u00e9sactiv\u00e9 pour renvoyer la liste de tous les points individuels, chacun dans un pseudo-cluster\n\n\nune valeur enti\u00e8re, de [1,9] (ne pas utiliser 10,11 et 12) : indique que le calcul des clusters est activ\u00e9 pour regrouper les points dans des clusters d'une largeur/hauter telles que d\u00e9finies dans la documentation de Elastic (cf. https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html)\n\n\nune distance reconnue par Elastic telle que \"1km\",\"100m\" (voir la documentation officielle) : indique que le calcul des clusters est activ\u00e9 pour regrouper les points dans des clusters de cette largeur/hauteur (e.g. 1km x 1km)\n\n\ntoute autre valeur enti\u00e8re ou r\u00e9elle au-del\u00e0 de ces bornes sera ignor\u00e9e\n\n\n\n\npropertiesSearch.cdvGeoPrecision = \n2\n\n\n/* 2 types of possible values (String):\n * - GeoHashgrid code: '1', '2', ..., '12'\n * - Distances: '1m', '10km'\n */\n\n\n\n\n\nPlusieurs options sont disponibles lors d'une recherche de type \"Carte\":\n\n\n\n\nhideClusterRect (Boolean) - Ne calcule pas et ne renvoie pas les champs \"minlat\", \"minlng\", \"maxlat\" et \"maxlng\" d\u00e9crivant le rectangle g\u00e9ographique dans lequel tous les points d'un cluster sont contenus\n\n\nhidePropertyIds (Boolean) - Ne renvoie pas la liste des id \"propertiesIds\"\n\n\nhideSinglePoint (Boolean) - Ne calcule pas et ne renvoie pas le champ \"singlePoint\" pr\u00e9cisant si le cluster peut \u00eatre \u00e9clat\u00e9 en augmentant la valeur de Geo Precision (cluster \"\u00e9clatable\" limit\u00e9 \u00e0 5m x 5m, donc cdvGeoPrecision = 9)\n\n\n\n\nRecherche du nombre de properties\n\n\nCette recherche permet d'obtenir uniquement le nombre de properties correspondant \u00e0 une recherche, et non d\u00e9tails sur les properties\n\n\n new CDVManager.CountPropertiesTask(_propertiesSearch, new CDVManager.CountPropertiesResponseHandler() {\n\n                @Override\n                public void result(CDVException e, int count) {\n                    if (e != null \n e.getNativeException() == null) {\n                        System.out.println(\nMap Clusters Error : \n + e.getErrorMessage());\n                    } else if (e != null \n e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(count + \n properties\n);\n                    }\n                }\n            }).execute();\n\n\n\n\nRecherche des propri\u00e9t\u00e9s par ID\n\n\n\nArrayList\nInteger\n _propertiesIds = new ArrayList\nInteger\n();\n _propertiesIds.add(42);\n _propertiesIds.add(686);\n\n new CDVManager.PropertiesByIdsTask(_propertiesIds, new CDVManager.PropertiesResponseHandler() {\n\n                            @Override\n                            public void result(CDVException e, ArrayList\nCDVProperty\n properties2) {\n                                if (e != null \n e.getNativeException() == null) {\n                                    System.out.println(\nSearch Properties Error : \n + e.getErrorMessage());\n                                } else if (e != null \n e.getNativeException() != null) {\n                                    e.getNativeException().printStackTrace();\n                                } else {\n                                    System.out.println(properties2.size() + \n properties returned by ids\n);\n                                    for (CDVProperty _property: properties2) {\n                                        System.out.println(_property.dictionary());\n                                    }\n                                }\n                            }\n                        }).execute();\n\n\n\n\n\nTri des propri\u00e9t\u00e9s\n\n\n\npropertiesSearch.setSort(kCDVPropertySortNone)\n\n/* Possible values (CDVPropertySort):\n* kCDVPropertySortNone\n* kCDVPropertySortNew\n* kCDVPropertySortPriceAsc\n* kCDVPropertySortPriceDesc\n* kCDVPropertySortPricePerMeterAsc\n* kCDVPropertySortPricePerMeterDesc\n* kCDVPropertySortSurfaceAsc\n* kCDVPropertySortSurfaceDesc\n* kCDVPropertySortDistanceAsc\n* kCDVPropertySortDistanceDesc\n*/\n\n\n\n\n\nNote importante\n : le tri par distance croissante/d\u00e9croissante (.distanceAsc, .distanceDesc) requiert le param\u00e9trage de cdvGeoDistances avec un seul cdvGeoDistance pour d\u00e9finir le point de d\u00e9part du tri et sa distance. Cela permet par exemple de \"lister les properties jusqu'\u00e0 500m de ma position\", en param\u00e9trant la position GPS de l'utilisateur comme le centre de cdvGeoDistance et une distance de 0.5 km, et en param\u00e9trant cdvSort = .distanceAsc\n\n\nParent types (Type des propri\u00e9t\u00e9s)\n\n\npropertiesSearch.setLabelTypes([\nhouse\n, \napartment\n])\n\n/* Possible values (Array of Strings):\n* - 'apartment'\n* - 'local'\n* - 'house'\n* - 'field'\n* - 'parking'\n* - 'other'\n*/\n\n\n\n\n\nStyle types (Style des propri\u00e9t\u00e9s)\n\n\npropertiesSearch.setStyleTypes([\nrenovate\n, \nprestige\n])\n\n/* Possible values (Array of Strings):\n* - 'renovate'\n* - 'prestige'\n* - 'campaign'\n*/\n\n\n\n\n\nCDVProperty.cdvOtherDatas (donn\u00e9es complementaires)\n\n\nChaque propri\u00e9t\u00e9 comprend une propri\u00e9t\u00e9 '.cdvOtherDatas' qui regroupe tout les informations de l'api non accessible directement via les autres propri\u00e9t\u00e9 de l'objet CDVProperty.\n\n\nCi-desssous le model de donn\u00e9e tel que retourn\u00e9 par l'api .PropertiesByIdsTask:\n\n\n\npropertyDetail {\n    id (integer): CDV\u2019s DB reference ,\n    flow_id (string): Flux provider DB reference ,\n    reference (string, optional): Reference of the property ,\n    title (string, optional): Original title (if exists) ,\n    description (string, optional): Long text description ,\n    city (string, optional): City location of the property ,\n    zip (string, optional): Zipcode of the city ,\n    location (location, optional): GPS coordinates of the property ,\n    area (number, optional): Normalized area ,\n    nb_rooms (integer, optional): Number of standard rooms ,\n    nb_bed_rooms (integer, optional): Number of standard bedrooms ,\n    cover (string, optional): URL of the cover photo ,\n    images (Array[string], optional): URLs of the photos ,\n    virtual_visit (string, optional): URL of the virtual visit ,\n    price (number, optional): Net price ,\n    price_per_meter (number, optional): Calculated ratio ,\n    price_excl_fees (number, optional): Price excluding fees ,\n    payer_fees (string, optional): Label of the payer(s) (in French) ,\n    buyer_fees (boolean, optional): Must the buyer pay the fees? ,\n    seller_fees (boolean, optional): Must the seller pay the fees? ,\n    percentage_buyer_fees (number, optional): Percentage fees payed by the buyer ,\n    percentage_seller_fees (number, optional): Percentage fees payed by the seller ,\n    rent (number, optional): Rent price ,\n    additionnal_rent (number, optional): Additionnal cost to the rent price ,\n    monthly_rent_inc_charge (number, optional): Rent price including monthly charge(s) ,\n    modality_rental_cost_recovery (string, optional): Description of how the initial rental cost is recovered ,\n    inventory_fees (number, optional): Cost of the inventory ,\n    tenancy_law (number, optional): Cost of the tenancy law ,\n    url_public_tariff (string, optional): URL of the realtor public tariff (legal notice) ,\n    dpe_label_consumption (string, optional): Energy consumption label (legal notice) ,\n    dpe_value_consumption (number, optional): Energy consumption vale (legal notice) ,\n    dpe_label_gaz (string, optional): Gas emission label (legal notice) ,\n    dpe_value_gaz (number, optional): Gas emission vale (legal notice) ,\n    type_parent (string, optional): Property type by category = ['parking', 'house', 'apartment', 'local', 'field', 'other'],\n    type_label (string, optional): Property type in French (free label) ,\n    type_style (string, optional): Property style by category = ['campaign', 'renovate', 'prestige'],\n    lot (boolean, optional): Belongs to a program? ,\n    agency (contact, optional): Agency/realtor contact ,\n    developer (contact, optional): Developper head/sales-office contact ,\n    integration_date (string, optional): Datetime \nYYYY-MM-DD HH:MM:SS\n ,\n    ad_url (string, optional): Link to the original ad ,\n    insee_code (string, optional): France INSEE code where the property is settled ,\n    stay_area (integer, optional): Area of the living room (salon) ,\n    year_of_construction (string, optional): Year of the construction, new or old ,\n    exposure (string, optional): Free description ,\n    kitchen (string, optional): Kitchen type (short description) ,\n    nb_bathrooms (integer, optional): Number of standard BATHrooms ,\n    nb_water_rooms (integer, optional): Water rooms aren't bath or WC ,\n    attic (string, optional): Attic's short description ,\n    terrace (integer, optional): None or several ,\n    nearby_transport (string, optional): Free description ,\n    nearby_school (string, optional): Free description ,\n    nearby_commerce (string, optional): Free description ,\n    heating_type (string, optional): Free description ,\n    district (string, optional): Known district ,\n    furnished (boolean, optional): Is it furnished? ,\n    cellar (boolean, optional): Is there a Cellar? ,\n    nb_floors (integer, optional): Number of inside floors ,\n    elevator (boolean, optional): is there an elevator? ,\n    nb_parkings (integer, optional): Private parkings ,\n    parking_type (string, optional): Free description ,\n    allotment (boolean, optional): Is the property in an allotment? ,\n    field_area (integer, optional): Area of the parcel of land ,\n    style (string, optional): Style of the construction ,\n    year_of_renovation (string, optional): Year of renovation ,\n    nb_levels (integer, optional): Number of levels of the building ,\n    fireplace (boolean, optional): Is there a fireplace? ,\n    nb_ground_floor_rooms (integer, optional): Number of ground floor rooms ,\n    nb_wcs (integer, optional): Not bath- or water-rooms ,\n    basement (boolean, optional): Settled at ground level (level 0)? ,\n    veranda (boolean, optional): Veranda? ,\n    garage (boolean, optional): Garage? (closed parking) ,\n    nb_garage_slots (integer, optional): Number of private parkings inside the garage ,\n    outbuildings (string, optional): Free description ,\n    swimming_pool (boolean, optional): Swimming pool? ,\n    floor (integer, optional): Floor number ,\n    standing (string, optional): Free description ,\n    intercom (boolean, optional): Is there an intercomm? ,\n    green_spaces (boolean, optional): Is there green spaces? ,\n    loggia (boolean, optional): Is there a loggia? ,\n    balcony (boolean, optional): Is there a balcony? (at least one) ,\n    private_garden (boolean, optional): Is there a private garden? ,\n    heating (string, optional): Concatenation of heating_energy and heating_mechanism ,\n    heating_energy (string, optional): Free description ,\n    heating_mechanism (string, optional): Free description ,\n    inner_state (string, optional): Free description ,\n    connects (boolean, optional): Serviced (connected to water/electricity networks) ,\n    far (integer, optional): French COS ,\n    hnsa (integer, optional): French SHON ,\n    facade (number, optional): Length of facade ,\n    depth (number, optional): Depth in front of facade ,\n    urbanism_certificate (boolean, optional): Urbanism certificate? ,\n    lot_ref (string, optional): Reference of the lot ,\n    max_height (number, optional): Max height of the building (permitted) ,\n    building_permit (boolean, optional): Building permit? ,\n    rental_yield (integer, optional): The rental yield ,\n    nb_lots (integer, optional): Number of lots ,\n    batch_lots_possible_sale (boolean, optional): Are batch lots proposed for sale? ,\n    total_free_area (integer, optional): Total free area (unoccupied) ,\n    total_area_occupied (integer, optional): Total occupied area ,\n    free_living_area (integer, optional): Free living area/space ,\n    occupied_living_area (integer, optional): Occupied living area/space ,\n    free_commerce_area (integer, optional): Free commercial/office space ,\n    occupied_commerce_area (integer, optional): Occupied commercial/office space ,\n    view (string, optional): The view... ,\n    geo_zone (string, optional): Free description of the environment ,\n    condominium (boolean, optional): Is there a condominium? ,\n    condominium_expenses (number, optional): Condominium expenses ,\n    alur_nb_lots (integer, optional): Number of lots (French Alur law) ,\n    alur_union_status (string, optional): The statutes of the Union managing the condominium ,\n    alur_condominium_backup_plan (boolean, optional): Does a condominium backup plan exist? ,\n    alur_percentage_fees_including (string, optional): The fees collected ,\n    lead_certificate (boolean, optional): Does a lead certificate exist? ,\n    diagnosis_asbestos (boolean, optional): Does a diagnosis asbestos exist? ,\n    dpe_submitted (boolean, optional): Is the DPE submitted? (see dpe_xxx fields) ,\n    dpe_virgin (boolean, optional): Is the DEP virgin? (see dpe_xxx flieds) ,\n    mandate_type (string, optional): Type of mandate contracted between seller and realtor ,\n    madate_ref (string, optional): Reference of the mandate ,\n    agency_fees (number, optional): Agency or realtor fees ,\n    charges (number, optional): Charges amount (usually per month) ,\n    guarante_deposit (number, optional): Guarantee deposit amount (once) ,\n    low_season_price (number, optional): Low season rent ,\n    middle_season_price (number, optional): Middle season rent ,\n    high_season_price (number, optional): High season rent ,\n    low_season_comments (string, optional): Low season comments ,\n    middle_season_comments (number, optional): Middle season comments ,\n    high_season_comments (string, optional): High season comments ,\n    environment (string, optional): Category of the environment (in French) ,\n    life_annuity (number, optional): Life lease annuity ,\n    head1lifetime_age (integer, optional): Life leasing, head 1 age ,\n    head2lifetime_age (integer, optional): Life leasing, head 2 age ,\n    free_for_sale (boolean, optional): Is it free for sale? ,\n    availability_date (string, optional): Datetime of availability date ,\n    digicode (string, optional): Digicode ,\n    terrace_area (integer, optional): Main or all terrace area(s) ,\n    balcony_area (integer, optional): Main or all balcony area(s) ,\n    videocom (boolean, optional): A video intercomm ,\n    garden_area (integer, optional): Area of the garden ,\n    area_min (integer, optional): For a group of lots ,\n    area_max (integer, optional): For a group of lots ,\n    nb_properties (integer, optional): Number of properties ,\n    price_min (number, optional): . ,\n    delivery_year (string, optional): Year of delivery ,\n    kitchen_type (string, optional): Free description ,\n    rent_min (number, optional): For a group of lots ,\n    rent_max (number, optional): For a group of lots ,\n    lot_availability (string, optional): Datetime of availability ,\n    living_area (integer, optional): Living area ,\n    nb_available_properties (integer, optional): Number of available properties ,\n    nb_rooms_min (integer, optional): Minimum number of rooms ,\n    typical_lot (boolean, optional): Model/show unit ,\n    main_features (string, optional): Free description ,\n    update_at (string, optional): Datetime \nYYYY-MM-DD HH:MM:SS\n of the last update of the ad\n}\nlocation {\n    lat (number): latitude ,\n    lng (number): longitude ('lng' for Google Maps API... but use 'lon' for geoJSON, elastic or GIS...)\n}\ncontact {\n    flow_id (integer): Flux provider DB/file reference ,\n    name (string, optional): Commercial or usual name ,\n    reg_name (string, optional): Legal registered name (may be different) ,\n    reg_number (string, optional): Legal registration number (country related) ,\n    email (string, optional): Professionnal e-mail ,\n    phone (string, optional): Professionnal phone ,\n    street (string, optional): Address of the agency ,\n    zip (string, optional): Zipcode of the agency ,\n    city (string, optional): City of the agency ,\n    country (string, optional): Country of the agency\n}\n\n\n\n\n\nCi-desssous le model de donn\u00e9e tel que retourn\u00e9 par l'api .PropertiesSearchTask:\n\n\n\nproperty {\n    id (integer): CDV\u2019s DB reference ,\n    flow_id (string): Flux provider DB reference ,\n    reference (string, optional): Reference of the property ,\n    title (string, optional): Original title (if exists) ,\n    description (string, optional): Long text description ,\n    city (string, optional): City location of the property ,\n    zip (string, optional): Zipcode of the city ,\n    location (location, optional): GPS coordinates of the property ,\n    area (number, optional): Normalized area ,\n    nb_rooms (integer, optional): Number of standard rooms ,\n    nb_bed_rooms (integer, optional): Number of standard bedrooms ,\n    cover (string, optional): URL of the cover photo ,\n    images (Array[string], optional): URLs of the photos ,\n    virtualVisit (string, optional): URL of the virtual visit ,\n    price (number, optional): Net price ,\n    price_per_meter (number, optional): Calculated ratio ,\n    priceExclFees (number, optional): Price excluding fees ,\n    payerFees (string, optional): Label of the payer(s) (in French) ,\n    buyerFees (boolean, optional): Must the buyer pay the fees? ,\n    sellerFees (boolean, optional): Must the seller pay the fees? ,\n    percentageBuyerFees (number, optional): Percentage fees payed by the buyer ,\n    percentageSellerFees (number, optional): Percentage fees payed by the seller ,\n    rent (number, optional): Rent price ,\n    additionnalRent (number, optional): Additionnal cost to the rent price ,\n    monthlyRentIncCharge (number, optional): Rent price including monthly charge(s) ,\n    modalityRentalCostRecovery (string, optional): Description of how the initial rental cost is recovered ,\n    inventoryFees (number, optional): Cost of the inventory ,\n    tenancyLaw (number, optional): Cost of the tenancy law ,\n    urlPublicTariff (string, optional): URL of the realtor public tariff (legal notice) ,\n    dpeLabelConsumption (string, optional): Energy consumption label (legal notice) ,\n    dpeValueConsumption (number, optional): Energy consumption vale (legal notice) ,\n    dpeLabelGaz (string, optional): Gas emission label (legal notice) ,\n    dpeValueGaz (number, optional): Gas emission vale (legal notice) ,\n    type_parent (string, optional): Property type by category = ['parking', 'house', 'apartment', 'local', 'field', 'other'],\n    type_label (string, optional): Property type in French (free label) ,\n    type_style (string, optional): Property style by category = ['campaign', 'renovate', 'prestige'],\n    lot (boolean, optional): Belongs to a program? ,\n    contact (contact, optional): Agency or realtor contact ,\n    integration_date (string, optional): Datetime \nYYYY-MM-DD HH:MM:SS\n\n}\nlocation {\n    lat (number): latitude ,\n    lng (number): longitude ('lng' for Google Maps API... but use 'lon' for geoJSON, elastic or GIS...)\n}\ncontact {\n    flow_id (integer): Flux provider DB/file reference ,\n    name (string, optional): Commercial or usual name ,\n    reg_name (string, optional): Legal registered name (may be different) ,\n    reg_number (string, optional): Legal registration number (country related) ,\n    email (string, optional): Professionnal e-mail ,\n    phone (string, optional): Professionnal phone ,\n    street (string, optional): Address of the agency ,\n    zip (string, optional): Zipcode of the agency ,\n    city (string, optional): City of the agency ,\n    country (string, optional): Country of the agency\n}", 
            "title": "Recherche de properties"
        }, 
        {
            "location": "/property_search/#criteres-de-recherche", 
            "text": "Pour effectuer une recheche, il faut cr\u00e9er un objet de type CDVPropertySearch et lui d\u00e9finir les attributs \u00e0 rechercher  Il est possible de pr\u00e9ciser une recheche avec des crit\u00e8res g\u00e9ographiques en utilisant :   des cercles (cdvGeoDistance) : une distance en kilom\u00e8tres autour d'un point central en coordonn\u00e9es GPS (lat,lng). Voir ci-dessous l'autre usage de cdvGeoDistances en tant que filtre des r\u00e9sultats et non plus crit\u00e8re de recherche ;  des polygones (cdvGeoPolygons) : au moins 3 points en coordonn\u00e9es GPS (lat,lng).   Il est possible de limiter les r\u00e9sultats retourn\u00e9s \u00e0 ceux visibles dans le viewport d'une carte :   viewport (cdvGeoBoundingBox) : obligatoirement caract\u00e9ris\u00e9 par ses coordonn\u00e9es GPS, d'abord Nord-Est (lat,lng) puis Sud-Ouest (lat,lng).   Il est possible de limiter une recheche sur des crit\u00e8res g\u00e9ographiques en utilisant des polygones, une distance (en kilom\u00e8tres) autour d'un point, ou une bounding box  \n CDVPropertySearch _propertiesSearch = new CDVPropertySearch();\n\n _propertiesSearch.setPageSize(10);\n         _propertiesSearch.setService(CDVPropertyService.buy);\n         _propertiesSearch.setParentTypes(new ArrayList String (Arrays.asList( house ,  apartment )));\n         _propertiesSearch.setNbRooms(new ArrayList Double (Arrays.asList(new Double(2), new Double(3))));\n\n CDVGeoPoint firstPoint = new CDVGeoPoint();\n    firstPoint.setLat(52.36947753602144);\n    firstPoint.setLng(-7.237292528124954);\n    CDVGeoPoint secondPoint = new CDVGeoPoint();\n    secondPoint.setLat(40.036761141167766);\n    secondPoint.setLng(11.637219190625046);\n\n    CDVGeoBoundingBox boundingBox = new CDVGeoBoundingBox();\n    boundingBox.getPoints().add(firstPoint);\n    boundingBox.getPoints().add(secondPoint);\n    _propertiesSearch.setGeoBoundingBox(boundingBox);", 
            "title": "Crit\u00e8res de recherche"
        }, 
        {
            "location": "/property_search/#recherche-pour-obtenir-une-liste", 
            "text": "Une fois l'objet CDVPropertySearch cr\u00e9\u00e9 il est possible de recherche les properties correspondantes         new CDVManager.PropertiesSearchTask(_propertiesSearch, new CDVManager.PropertySearchResponseHandler() {\n\n            @Override\n            public void result(CDVException e, ArrayList CDVProperty  properties, int count) {\n                if (e != null   e.getNativeException() == null) {\n                    System.out.println( Search Properties Error :   + e.getErrorMessage());\n                } else if (e != null   e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(properties.size() +   properties returned with search on a total of   + count +   properties );\n\n\n                }\n            }\n        }).execute();  Pour obtenir les r\u00e9sultats suivants (c-a-d la page suivante) il faut incr\u00e9menter la property  cdvPage  de l'objet  CDVPropertySearch  et relancer la recherche. La premi\u00e8re page a l'index  1 , la seconde page a l'index  2 , etc-etc...  \n     propertiesSearch.cdvPage = 2", 
            "title": "Recherche pour obtenir une liste"
        }, 
        {
            "location": "/property_search/#recherche-pour-obtenir-des-cluster-a-fin-daffichage-sur-une-carte", 
            "text": "new CDVManager.MapPropertiesTask(_propertiesSearch, new CDVManager.MapPropertiesResponseHandler() {\n\n                @Override\n                public void result(CDVException e, ArrayList CDVCluster  clusters, int count) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Map Clusters Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(clusters.size() +   clusters returned with search on a total of  + count +  properties );\n                    }\n                }\n            }).execute();", 
            "title": "Recherche pour obtenir des cluster \u00e0 fin d'affichage sur une carte"
        }, 
        {
            "location": "/property_search/#geo-precision-parametrage", 
            "text": "The GeoHashgrid precision can either be defined in terms of the integer precision levels mentioned in the Elastic Search documentation.\nValues outside of [1,12] will be rejected.\nAlternatively, the precision level can be approximated from a distance measure like \"1km\", \"10m\"\n(cf. https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html)  La pr\u00e9csion du regroupement par cluster, maillage ou fonction  GeoHashgrid , d\u00e9finie de 3 fa\u00e7ons :   la valeur z\u00e9ro \"0\" : indique que le calcul des clusters doit \u00eatre d\u00e9sactiv\u00e9 pour renvoyer la liste de tous les points individuels, chacun dans un pseudo-cluster  une valeur enti\u00e8re, de [1,9] (ne pas utiliser 10,11 et 12) : indique que le calcul des clusters est activ\u00e9 pour regrouper les points dans des clusters d'une largeur/hauter telles que d\u00e9finies dans la documentation de Elastic (cf. https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html)  une distance reconnue par Elastic telle que \"1km\",\"100m\" (voir la documentation officielle) : indique que le calcul des clusters est activ\u00e9 pour regrouper les points dans des clusters de cette largeur/hauteur (e.g. 1km x 1km)  toute autre valeur enti\u00e8re ou r\u00e9elle au-del\u00e0 de ces bornes sera ignor\u00e9e   propertiesSearch.cdvGeoPrecision =  2 \n\n/* 2 types of possible values (String):\n * - GeoHashgrid code: '1', '2', ..., '12'\n * - Distances: '1m', '10km'\n */", 
            "title": "Geo Precision (param\u00e9trage)"
        }, 
        {
            "location": "/property_search/#plusieurs-options-sont-disponibles-lors-dune-recherche-de-type-carte", 
            "text": "hideClusterRect (Boolean) - Ne calcule pas et ne renvoie pas les champs \"minlat\", \"minlng\", \"maxlat\" et \"maxlng\" d\u00e9crivant le rectangle g\u00e9ographique dans lequel tous les points d'un cluster sont contenus  hidePropertyIds (Boolean) - Ne renvoie pas la liste des id \"propertiesIds\"  hideSinglePoint (Boolean) - Ne calcule pas et ne renvoie pas le champ \"singlePoint\" pr\u00e9cisant si le cluster peut \u00eatre \u00e9clat\u00e9 en augmentant la valeur de Geo Precision (cluster \"\u00e9clatable\" limit\u00e9 \u00e0 5m x 5m, donc cdvGeoPrecision = 9)", 
            "title": "Plusieurs options sont disponibles lors d'une recherche de type \"Carte\":"
        }, 
        {
            "location": "/property_search/#recherche-du-nombre-de-properties", 
            "text": "Cette recherche permet d'obtenir uniquement le nombre de properties correspondant \u00e0 une recherche, et non d\u00e9tails sur les properties   new CDVManager.CountPropertiesTask(_propertiesSearch, new CDVManager.CountPropertiesResponseHandler() {\n\n                @Override\n                public void result(CDVException e, int count) {\n                    if (e != null   e.getNativeException() == null) {\n                        System.out.println( Map Clusters Error :   + e.getErrorMessage());\n                    } else if (e != null   e.getNativeException() != null) {\n                        e.getNativeException().printStackTrace();\n                    } else {\n                        System.out.println(count +   properties );\n                    }\n                }\n            }).execute();", 
            "title": "Recherche du nombre de properties"
        }, 
        {
            "location": "/property_search/#recherche-des-proprietes-par-id", 
            "text": "ArrayList Integer  _propertiesIds = new ArrayList Integer ();\n _propertiesIds.add(42);\n _propertiesIds.add(686);\n\n new CDVManager.PropertiesByIdsTask(_propertiesIds, new CDVManager.PropertiesResponseHandler() {\n\n                            @Override\n                            public void result(CDVException e, ArrayList CDVProperty  properties2) {\n                                if (e != null   e.getNativeException() == null) {\n                                    System.out.println( Search Properties Error :   + e.getErrorMessage());\n                                } else if (e != null   e.getNativeException() != null) {\n                                    e.getNativeException().printStackTrace();\n                                } else {\n                                    System.out.println(properties2.size() +   properties returned by ids );\n                                    for (CDVProperty _property: properties2) {\n                                        System.out.println(_property.dictionary());\n                                    }\n                                }\n                            }\n                        }).execute();", 
            "title": "Recherche des propri\u00e9t\u00e9s par ID"
        }, 
        {
            "location": "/property_search/#tri-des-proprietes", 
            "text": "propertiesSearch.setSort(kCDVPropertySortNone)\n\n/* Possible values (CDVPropertySort):\n* kCDVPropertySortNone\n* kCDVPropertySortNew\n* kCDVPropertySortPriceAsc\n* kCDVPropertySortPriceDesc\n* kCDVPropertySortPricePerMeterAsc\n* kCDVPropertySortPricePerMeterDesc\n* kCDVPropertySortSurfaceAsc\n* kCDVPropertySortSurfaceDesc\n* kCDVPropertySortDistanceAsc\n* kCDVPropertySortDistanceDesc\n*/  Note importante  : le tri par distance croissante/d\u00e9croissante (.distanceAsc, .distanceDesc) requiert le param\u00e9trage de cdvGeoDistances avec un seul cdvGeoDistance pour d\u00e9finir le point de d\u00e9part du tri et sa distance. Cela permet par exemple de \"lister les properties jusqu'\u00e0 500m de ma position\", en param\u00e9trant la position GPS de l'utilisateur comme le centre de cdvGeoDistance et une distance de 0.5 km, et en param\u00e9trant cdvSort = .distanceAsc", 
            "title": "Tri des propri\u00e9t\u00e9s"
        }, 
        {
            "location": "/property_search/#parent-types-type-des-proprietes", 
            "text": "propertiesSearch.setLabelTypes([ house ,  apartment ])\n\n/* Possible values (Array of Strings):\n* - 'apartment'\n* - 'local'\n* - 'house'\n* - 'field'\n* - 'parking'\n* - 'other'\n*/", 
            "title": "Parent types (Type des propri\u00e9t\u00e9s)"
        }, 
        {
            "location": "/property_search/#style-types-style-des-proprietes", 
            "text": "propertiesSearch.setStyleTypes([ renovate ,  prestige ])\n\n/* Possible values (Array of Strings):\n* - 'renovate'\n* - 'prestige'\n* - 'campaign'\n*/", 
            "title": "Style types (Style des propri\u00e9t\u00e9s)"
        }, 
        {
            "location": "/property_search/#cdvpropertycdvotherdatas-donnees-complementaires", 
            "text": "Chaque propri\u00e9t\u00e9 comprend une propri\u00e9t\u00e9 '.cdvOtherDatas' qui regroupe tout les informations de l'api non accessible directement via les autres propri\u00e9t\u00e9 de l'objet CDVProperty.  Ci-desssous le model de donn\u00e9e tel que retourn\u00e9 par l'api .PropertiesByIdsTask:  \npropertyDetail {\n    id (integer): CDV\u2019s DB reference ,\n    flow_id (string): Flux provider DB reference ,\n    reference (string, optional): Reference of the property ,\n    title (string, optional): Original title (if exists) ,\n    description (string, optional): Long text description ,\n    city (string, optional): City location of the property ,\n    zip (string, optional): Zipcode of the city ,\n    location (location, optional): GPS coordinates of the property ,\n    area (number, optional): Normalized area ,\n    nb_rooms (integer, optional): Number of standard rooms ,\n    nb_bed_rooms (integer, optional): Number of standard bedrooms ,\n    cover (string, optional): URL of the cover photo ,\n    images (Array[string], optional): URLs of the photos ,\n    virtual_visit (string, optional): URL of the virtual visit ,\n    price (number, optional): Net price ,\n    price_per_meter (number, optional): Calculated ratio ,\n    price_excl_fees (number, optional): Price excluding fees ,\n    payer_fees (string, optional): Label of the payer(s) (in French) ,\n    buyer_fees (boolean, optional): Must the buyer pay the fees? ,\n    seller_fees (boolean, optional): Must the seller pay the fees? ,\n    percentage_buyer_fees (number, optional): Percentage fees payed by the buyer ,\n    percentage_seller_fees (number, optional): Percentage fees payed by the seller ,\n    rent (number, optional): Rent price ,\n    additionnal_rent (number, optional): Additionnal cost to the rent price ,\n    monthly_rent_inc_charge (number, optional): Rent price including monthly charge(s) ,\n    modality_rental_cost_recovery (string, optional): Description of how the initial rental cost is recovered ,\n    inventory_fees (number, optional): Cost of the inventory ,\n    tenancy_law (number, optional): Cost of the tenancy law ,\n    url_public_tariff (string, optional): URL of the realtor public tariff (legal notice) ,\n    dpe_label_consumption (string, optional): Energy consumption label (legal notice) ,\n    dpe_value_consumption (number, optional): Energy consumption vale (legal notice) ,\n    dpe_label_gaz (string, optional): Gas emission label (legal notice) ,\n    dpe_value_gaz (number, optional): Gas emission vale (legal notice) ,\n    type_parent (string, optional): Property type by category = ['parking', 'house', 'apartment', 'local', 'field', 'other'],\n    type_label (string, optional): Property type in French (free label) ,\n    type_style (string, optional): Property style by category = ['campaign', 'renovate', 'prestige'],\n    lot (boolean, optional): Belongs to a program? ,\n    agency (contact, optional): Agency/realtor contact ,\n    developer (contact, optional): Developper head/sales-office contact ,\n    integration_date (string, optional): Datetime  YYYY-MM-DD HH:MM:SS  ,\n    ad_url (string, optional): Link to the original ad ,\n    insee_code (string, optional): France INSEE code where the property is settled ,\n    stay_area (integer, optional): Area of the living room (salon) ,\n    year_of_construction (string, optional): Year of the construction, new or old ,\n    exposure (string, optional): Free description ,\n    kitchen (string, optional): Kitchen type (short description) ,\n    nb_bathrooms (integer, optional): Number of standard BATHrooms ,\n    nb_water_rooms (integer, optional): Water rooms aren't bath or WC ,\n    attic (string, optional): Attic's short description ,\n    terrace (integer, optional): None or several ,\n    nearby_transport (string, optional): Free description ,\n    nearby_school (string, optional): Free description ,\n    nearby_commerce (string, optional): Free description ,\n    heating_type (string, optional): Free description ,\n    district (string, optional): Known district ,\n    furnished (boolean, optional): Is it furnished? ,\n    cellar (boolean, optional): Is there a Cellar? ,\n    nb_floors (integer, optional): Number of inside floors ,\n    elevator (boolean, optional): is there an elevator? ,\n    nb_parkings (integer, optional): Private parkings ,\n    parking_type (string, optional): Free description ,\n    allotment (boolean, optional): Is the property in an allotment? ,\n    field_area (integer, optional): Area of the parcel of land ,\n    style (string, optional): Style of the construction ,\n    year_of_renovation (string, optional): Year of renovation ,\n    nb_levels (integer, optional): Number of levels of the building ,\n    fireplace (boolean, optional): Is there a fireplace? ,\n    nb_ground_floor_rooms (integer, optional): Number of ground floor rooms ,\n    nb_wcs (integer, optional): Not bath- or water-rooms ,\n    basement (boolean, optional): Settled at ground level (level 0)? ,\n    veranda (boolean, optional): Veranda? ,\n    garage (boolean, optional): Garage? (closed parking) ,\n    nb_garage_slots (integer, optional): Number of private parkings inside the garage ,\n    outbuildings (string, optional): Free description ,\n    swimming_pool (boolean, optional): Swimming pool? ,\n    floor (integer, optional): Floor number ,\n    standing (string, optional): Free description ,\n    intercom (boolean, optional): Is there an intercomm? ,\n    green_spaces (boolean, optional): Is there green spaces? ,\n    loggia (boolean, optional): Is there a loggia? ,\n    balcony (boolean, optional): Is there a balcony? (at least one) ,\n    private_garden (boolean, optional): Is there a private garden? ,\n    heating (string, optional): Concatenation of heating_energy and heating_mechanism ,\n    heating_energy (string, optional): Free description ,\n    heating_mechanism (string, optional): Free description ,\n    inner_state (string, optional): Free description ,\n    connects (boolean, optional): Serviced (connected to water/electricity networks) ,\n    far (integer, optional): French COS ,\n    hnsa (integer, optional): French SHON ,\n    facade (number, optional): Length of facade ,\n    depth (number, optional): Depth in front of facade ,\n    urbanism_certificate (boolean, optional): Urbanism certificate? ,\n    lot_ref (string, optional): Reference of the lot ,\n    max_height (number, optional): Max height of the building (permitted) ,\n    building_permit (boolean, optional): Building permit? ,\n    rental_yield (integer, optional): The rental yield ,\n    nb_lots (integer, optional): Number of lots ,\n    batch_lots_possible_sale (boolean, optional): Are batch lots proposed for sale? ,\n    total_free_area (integer, optional): Total free area (unoccupied) ,\n    total_area_occupied (integer, optional): Total occupied area ,\n    free_living_area (integer, optional): Free living area/space ,\n    occupied_living_area (integer, optional): Occupied living area/space ,\n    free_commerce_area (integer, optional): Free commercial/office space ,\n    occupied_commerce_area (integer, optional): Occupied commercial/office space ,\n    view (string, optional): The view... ,\n    geo_zone (string, optional): Free description of the environment ,\n    condominium (boolean, optional): Is there a condominium? ,\n    condominium_expenses (number, optional): Condominium expenses ,\n    alur_nb_lots (integer, optional): Number of lots (French Alur law) ,\n    alur_union_status (string, optional): The statutes of the Union managing the condominium ,\n    alur_condominium_backup_plan (boolean, optional): Does a condominium backup plan exist? ,\n    alur_percentage_fees_including (string, optional): The fees collected ,\n    lead_certificate (boolean, optional): Does a lead certificate exist? ,\n    diagnosis_asbestos (boolean, optional): Does a diagnosis asbestos exist? ,\n    dpe_submitted (boolean, optional): Is the DPE submitted? (see dpe_xxx fields) ,\n    dpe_virgin (boolean, optional): Is the DEP virgin? (see dpe_xxx flieds) ,\n    mandate_type (string, optional): Type of mandate contracted between seller and realtor ,\n    madate_ref (string, optional): Reference of the mandate ,\n    agency_fees (number, optional): Agency or realtor fees ,\n    charges (number, optional): Charges amount (usually per month) ,\n    guarante_deposit (number, optional): Guarantee deposit amount (once) ,\n    low_season_price (number, optional): Low season rent ,\n    middle_season_price (number, optional): Middle season rent ,\n    high_season_price (number, optional): High season rent ,\n    low_season_comments (string, optional): Low season comments ,\n    middle_season_comments (number, optional): Middle season comments ,\n    high_season_comments (string, optional): High season comments ,\n    environment (string, optional): Category of the environment (in French) ,\n    life_annuity (number, optional): Life lease annuity ,\n    head1lifetime_age (integer, optional): Life leasing, head 1 age ,\n    head2lifetime_age (integer, optional): Life leasing, head 2 age ,\n    free_for_sale (boolean, optional): Is it free for sale? ,\n    availability_date (string, optional): Datetime of availability date ,\n    digicode (string, optional): Digicode ,\n    terrace_area (integer, optional): Main or all terrace area(s) ,\n    balcony_area (integer, optional): Main or all balcony area(s) ,\n    videocom (boolean, optional): A video intercomm ,\n    garden_area (integer, optional): Area of the garden ,\n    area_min (integer, optional): For a group of lots ,\n    area_max (integer, optional): For a group of lots ,\n    nb_properties (integer, optional): Number of properties ,\n    price_min (number, optional): . ,\n    delivery_year (string, optional): Year of delivery ,\n    kitchen_type (string, optional): Free description ,\n    rent_min (number, optional): For a group of lots ,\n    rent_max (number, optional): For a group of lots ,\n    lot_availability (string, optional): Datetime of availability ,\n    living_area (integer, optional): Living area ,\n    nb_available_properties (integer, optional): Number of available properties ,\n    nb_rooms_min (integer, optional): Minimum number of rooms ,\n    typical_lot (boolean, optional): Model/show unit ,\n    main_features (string, optional): Free description ,\n    update_at (string, optional): Datetime  YYYY-MM-DD HH:MM:SS  of the last update of the ad\n}\nlocation {\n    lat (number): latitude ,\n    lng (number): longitude ('lng' for Google Maps API... but use 'lon' for geoJSON, elastic or GIS...)\n}\ncontact {\n    flow_id (integer): Flux provider DB/file reference ,\n    name (string, optional): Commercial or usual name ,\n    reg_name (string, optional): Legal registered name (may be different) ,\n    reg_number (string, optional): Legal registration number (country related) ,\n    email (string, optional): Professionnal e-mail ,\n    phone (string, optional): Professionnal phone ,\n    street (string, optional): Address of the agency ,\n    zip (string, optional): Zipcode of the agency ,\n    city (string, optional): City of the agency ,\n    country (string, optional): Country of the agency\n}  Ci-desssous le model de donn\u00e9e tel que retourn\u00e9 par l'api .PropertiesSearchTask:  \nproperty {\n    id (integer): CDV\u2019s DB reference ,\n    flow_id (string): Flux provider DB reference ,\n    reference (string, optional): Reference of the property ,\n    title (string, optional): Original title (if exists) ,\n    description (string, optional): Long text description ,\n    city (string, optional): City location of the property ,\n    zip (string, optional): Zipcode of the city ,\n    location (location, optional): GPS coordinates of the property ,\n    area (number, optional): Normalized area ,\n    nb_rooms (integer, optional): Number of standard rooms ,\n    nb_bed_rooms (integer, optional): Number of standard bedrooms ,\n    cover (string, optional): URL of the cover photo ,\n    images (Array[string], optional): URLs of the photos ,\n    virtualVisit (string, optional): URL of the virtual visit ,\n    price (number, optional): Net price ,\n    price_per_meter (number, optional): Calculated ratio ,\n    priceExclFees (number, optional): Price excluding fees ,\n    payerFees (string, optional): Label of the payer(s) (in French) ,\n    buyerFees (boolean, optional): Must the buyer pay the fees? ,\n    sellerFees (boolean, optional): Must the seller pay the fees? ,\n    percentageBuyerFees (number, optional): Percentage fees payed by the buyer ,\n    percentageSellerFees (number, optional): Percentage fees payed by the seller ,\n    rent (number, optional): Rent price ,\n    additionnalRent (number, optional): Additionnal cost to the rent price ,\n    monthlyRentIncCharge (number, optional): Rent price including monthly charge(s) ,\n    modalityRentalCostRecovery (string, optional): Description of how the initial rental cost is recovered ,\n    inventoryFees (number, optional): Cost of the inventory ,\n    tenancyLaw (number, optional): Cost of the tenancy law ,\n    urlPublicTariff (string, optional): URL of the realtor public tariff (legal notice) ,\n    dpeLabelConsumption (string, optional): Energy consumption label (legal notice) ,\n    dpeValueConsumption (number, optional): Energy consumption vale (legal notice) ,\n    dpeLabelGaz (string, optional): Gas emission label (legal notice) ,\n    dpeValueGaz (number, optional): Gas emission vale (legal notice) ,\n    type_parent (string, optional): Property type by category = ['parking', 'house', 'apartment', 'local', 'field', 'other'],\n    type_label (string, optional): Property type in French (free label) ,\n    type_style (string, optional): Property style by category = ['campaign', 'renovate', 'prestige'],\n    lot (boolean, optional): Belongs to a program? ,\n    contact (contact, optional): Agency or realtor contact ,\n    integration_date (string, optional): Datetime  YYYY-MM-DD HH:MM:SS \n}\nlocation {\n    lat (number): latitude ,\n    lng (number): longitude ('lng' for Google Maps API... but use 'lon' for geoJSON, elastic or GIS...)\n}\ncontact {\n    flow_id (integer): Flux provider DB/file reference ,\n    name (string, optional): Commercial or usual name ,\n    reg_name (string, optional): Legal registered name (may be different) ,\n    reg_number (string, optional): Legal registration number (country related) ,\n    email (string, optional): Professionnal e-mail ,\n    phone (string, optional): Professionnal phone ,\n    street (string, optional): Address of the agency ,\n    zip (string, optional): Zipcode of the agency ,\n    city (string, optional): City of the agency ,\n    country (string, optional): Country of the agency\n}", 
            "title": "CDVProperty.cdvOtherDatas (donn\u00e9es complementaires)"
        }, 
        {
            "location": "/clusters/", 
            "text": "Object CDVCluster\n\n\n/** Cluster Properties count in cluster */\nprivate Integer _cdvCount = null;\n\n/** Cluster Latitude */\nprivate Double _cdvLat = null;\n\n/** Cluster Longitude */\nprivate Double _cdvLng = null;\n\n/** Cluster Minimal Latitude in cluster */\nprivate Double _cdvMinLat = null;\n\n/** Cluster Minimal Longitude in cluster */\nprivate Double _cdvMinLng = null;\n\n/** Cluster Maximal Latitude in cluster */\nprivate Double _cdvMaxLat = null;\n\n/** Cluster Maximal Longitude in cluster */\nprivate Double _cdvMaxLng = null;\n\n/** Cluster List of properties Ids in cluster */\nprivate ArrayList\nInteger\n _cdvPropertiesIds;\n\n/** Cluster is single point */\nprivate Boolean _cdvSinglePoint;", 
            "title": "Clusters"
        }, 
        {
            "location": "/clusters/#object-cdvcluster", 
            "text": "/** Cluster Properties count in cluster */\nprivate Integer _cdvCount = null;\n\n/** Cluster Latitude */\nprivate Double _cdvLat = null;\n\n/** Cluster Longitude */\nprivate Double _cdvLng = null;\n\n/** Cluster Minimal Latitude in cluster */\nprivate Double _cdvMinLat = null;\n\n/** Cluster Minimal Longitude in cluster */\nprivate Double _cdvMinLng = null;\n\n/** Cluster Maximal Latitude in cluster */\nprivate Double _cdvMaxLat = null;\n\n/** Cluster Maximal Longitude in cluster */\nprivate Double _cdvMaxLng = null;\n\n/** Cluster List of properties Ids in cluster */\nprivate ArrayList Integer  _cdvPropertiesIds;\n\n/** Cluster is single point */\nprivate Boolean _cdvSinglePoint;", 
            "title": "Object CDVCluster"
        }, 
        {
            "location": "/alerts/", 
            "text": "Une alerte permet \u00e0 l'utilisateur d'\u00eatre notifi\u00e9 par email quand des biens correspondants \u00e0 ses crit\u00e8res sont ajout\u00e9s.\n\n\nCr\u00e9er une nouvelle alerte\n\n\nfinal CDVAlert _cdvNewAlert = new CDVAlert();\n            _cdvNewAlert.setName(\nNouvelle alerte\n);\n            _cdvNewAlert.setMinPrice(new Double(90000));\n            _cdvNewAlert.setMinArea(new Double(90));\n            _cdvNewAlert.setEmail(CDVManager.getConnectedUser().getEmail());\n\nnew CDVManager.CreateAlertTask(_cdvNewAlert, new CDVManager.AlertResponseHandler() {\n    @Override\n        public void result(CDVException e, CDVAlert _cdvAlert) {\n            if (e != null \n e.getNativeException() == null) {\n                                    System.out.println(\nCreate Alert Error : \n + e.getErrorMessage());\n                                } else if (e != null \n e.getNativeException() != null) {\n                                    e.getNativeException().printStackTrace();\n                                } else {\n                                    System.out.println(\nAlert created : \n + _cdvAlert.dictionary());\n                }\n                            }\n                        }).execute();\n\n\n\n\n\nRecherche les alertes actives\n\n\n  new CDVManager.GetAlertsTask(new CDVManager.AlertsResponseHandler() {\n\n      @Override\n      public void result(CDVException e, ArrayList\nCDVAlert\n _cdvAlerts) {\n          if (e != null \n e.getNativeException() == null) {\n              System.out.println(\nGet alerts Error : \n + e.getErrorMessage());\n          } else if (e != null \n e.getNativeException() != null) {\n              e.getNativeException().printStackTrace();\n          } else {\n              System.out.println(_cdvAlerts.size() + \n alerts for User \n + CDVManager.getConnectedUser().getFirstName());\n          }\n      }\n  }).execute();\n\n\n\n\nSupprimer une alerte\n\n\n new CDVManager.GetAlertsTask(new CDVManager.AlertsResponseHandler() {\n\n@Override\npublic void result(CDVException e, ArrayList\nCDVAlert\n _cdvAlerts) {\n\n    CDVAlert    firstAlert = (CDVAlert) _cdvAlerts.toArray()[0];\n\n    new CDVManager.DeleteAlertTask(firstAlert, new CDVManager.NoResponseHandler() {\n        @Override\n        public void result(CDVException e) {\n            if (e != null \n e.getNativeException() == null) {\n                System.out.println(\nDelete alert Error : \n + e.getErrorMessage());\n            } else if (e != null \n e.getNativeException() != null) {\n                e.getNativeException().printStackTrace();\n            } else {\n                System.out.println(\nAlert deleted\n);\n            }\n        }\n    }).execute();", 
            "title": "Alertes"
        }, 
        {
            "location": "/alerts/#creer-une-nouvelle-alerte", 
            "text": "final CDVAlert _cdvNewAlert = new CDVAlert();\n            _cdvNewAlert.setName( Nouvelle alerte );\n            _cdvNewAlert.setMinPrice(new Double(90000));\n            _cdvNewAlert.setMinArea(new Double(90));\n            _cdvNewAlert.setEmail(CDVManager.getConnectedUser().getEmail());\n\nnew CDVManager.CreateAlertTask(_cdvNewAlert, new CDVManager.AlertResponseHandler() {\n    @Override\n        public void result(CDVException e, CDVAlert _cdvAlert) {\n            if (e != null   e.getNativeException() == null) {\n                                    System.out.println( Create Alert Error :   + e.getErrorMessage());\n                                } else if (e != null   e.getNativeException() != null) {\n                                    e.getNativeException().printStackTrace();\n                                } else {\n                                    System.out.println( Alert created :   + _cdvAlert.dictionary());\n                }\n                            }\n                        }).execute();", 
            "title": "Cr\u00e9er une nouvelle alerte"
        }, 
        {
            "location": "/alerts/#recherche-les-alertes-actives", 
            "text": "new CDVManager.GetAlertsTask(new CDVManager.AlertsResponseHandler() {\n\n      @Override\n      public void result(CDVException e, ArrayList CDVAlert  _cdvAlerts) {\n          if (e != null   e.getNativeException() == null) {\n              System.out.println( Get alerts Error :   + e.getErrorMessage());\n          } else if (e != null   e.getNativeException() != null) {\n              e.getNativeException().printStackTrace();\n          } else {\n              System.out.println(_cdvAlerts.size() +   alerts for User   + CDVManager.getConnectedUser().getFirstName());\n          }\n      }\n  }).execute();", 
            "title": "Recherche les alertes actives"
        }, 
        {
            "location": "/alerts/#supprimer-une-alerte", 
            "text": "new CDVManager.GetAlertsTask(new CDVManager.AlertsResponseHandler() {\n\n@Override\npublic void result(CDVException e, ArrayList CDVAlert  _cdvAlerts) {\n\n    CDVAlert    firstAlert = (CDVAlert) _cdvAlerts.toArray()[0];\n\n    new CDVManager.DeleteAlertTask(firstAlert, new CDVManager.NoResponseHandler() {\n        @Override\n        public void result(CDVException e) {\n            if (e != null   e.getNativeException() == null) {\n                System.out.println( Delete alert Error :   + e.getErrorMessage());\n            } else if (e != null   e.getNativeException() != null) {\n                e.getNativeException().printStackTrace();\n            } else {\n                System.out.println( Alert deleted );\n            }\n        }\n    }).execute();", 
            "title": "Supprimer une alerte"
        }, 
        {
            "location": "/favorites/", 
            "text": "Marquer une property comme favorites\n\n\nexistingProperty\n est une variable de type CDVProperty obtenue lors d'une recherche\n\n\n  new CDVManager.CreateFavoriteTask(existingProperty, new CDVManager.NoResponseHandler() {\n            @Override\n            public void result(CDVException e) {\n                if (e != null \n e.getNativeException() == null) {\n                    System.out.println(\nAdd Favorite Error : \n + e.getErrorMessage());\n                } else if (e != null \n e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(\nFavorite Property added\n);\n\n                }}}).execute();\n\n\n\n\n\nSupprimer un favori\n\n\nnew CDVManager.DeleteFavoriteTask(propertyToRemove, new CDVManager.NoResponseHandler() {\n                                        @Override\n                                        public void result(CDVException e) {\n                                            if (e != null \n e.getNativeException() == null) {\n                                                System.out.println(\nDelete Favorite Error : \n + e.getErrorMessage());\n                                            } else if (e != null \n e.getNativeException() != null) {\n                                                e.getNativeException().printStackTrace();\n                                            } else {\n                                                System.out.println(\nFavorite Property removed\n);\n                                            }\n                                        }\n                                    }).execute();", 
            "title": "Favoris"
        }, 
        {
            "location": "/favorites/#marquer-une-property-comme-favorites", 
            "text": "existingProperty  est une variable de type CDVProperty obtenue lors d'une recherche    new CDVManager.CreateFavoriteTask(existingProperty, new CDVManager.NoResponseHandler() {\n            @Override\n            public void result(CDVException e) {\n                if (e != null   e.getNativeException() == null) {\n                    System.out.println( Add Favorite Error :   + e.getErrorMessage());\n                } else if (e != null   e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println( Favorite Property added );\n\n                }}}).execute();", 
            "title": "Marquer une property comme favorites"
        }, 
        {
            "location": "/favorites/#supprimer-un-favori", 
            "text": "new CDVManager.DeleteFavoriteTask(propertyToRemove, new CDVManager.NoResponseHandler() {\n                                        @Override\n                                        public void result(CDVException e) {\n                                            if (e != null   e.getNativeException() == null) {\n                                                System.out.println( Delete Favorite Error :   + e.getErrorMessage());\n                                            } else if (e != null   e.getNativeException() != null) {\n                                                e.getNativeException().printStackTrace();\n                                            } else {\n                                                System.out.println( Favorite Property removed );\n                                            }\n                                        }\n                                    }).execute();", 
            "title": "Supprimer un favori"
        }, 
        {
            "location": "/poi/", 
            "text": "Cr\u00e9er un POI\n\n\nIl est n\u00e9cessaire de cr\u00e9er un objet de type \nCDVPOI\n puis de le sauver\n\n\n\n CDVPOI _newPOI = new CDVPOI();\n                         _newPOI.setName(\nMy POI \n + (pois.size()+1));\n                         _newPOI.setDescription(\nDescription of my POI \n + (pois.size()+1));\n                         _newPOI.setLat(48.8834611 + Math.random());\n                         _newPOI.setLng(2.2652248 + Math.random());\n                         _newPOI.setLink(\nbicycling\n);\n                         _newPOI.setChronoMaps(new ArrayList\nString\n(Arrays.asList(\ntime5\n, \ntime10\n, \ntime15\n)));\n\n\n\n       new CDVManager.CreatePOITask(_newPOI, new CDVManager.POIResponseHandler() {\n\n                                   @Override\n                                   public void result(CDVException e2, CDVPOI poi) {\n                                       if (e2 != null \n e2.getNativeException() == null) {\n                                           System.out.println(\nCreate POI Error : \n + e2.getErrorMessage());\n                                       } else if (e2 != null \n e2.getNativeException() != null) {\n                                           e2.getNativeException().printStackTrace();\n                                       } else {\n                                           System.out.println(\nPOI created \n + poi.dictionary());\n\n                                       }\n                                   }\n                               }).execute();\n\n\n\n\n\nR\u00e9cup\u00e9rer les POIs existants\n\n\n new CDVManager.GetPOIsTask(new CDVManager.POIsResponseHandler() {\n            @Override\n            public void result(CDVException e, ArrayList\nCDVPOI\n pois) {\n                if (e != null \n e.getNativeException() == null) {\n                    System.out.println(\nGet POIs Error : \n + e.getErrorMessage());\n                } else if (e != null \n e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(pois.size() + \n POIs\n);\n                }}}).execute();\n\n\n\n\nSupprimer un POI\n\n\n        new CDVManager.DeletePOITask(existingPoi, new CDVManager.NoResponseHandler() {\n            @Override\n            public void result(CDVException e) {\n                if (e != null \n e.getNativeException() == null) {\n                    System.out.println(\nDelete POI Error : \n + e.getErrorMessage());\n                } else if (e != null \n e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(\nPOI deleted\n);\n                }\n            }\n        }).execute();", 
            "title": "POIs"
        }, 
        {
            "location": "/poi/#creer-un-poi", 
            "text": "Il est n\u00e9cessaire de cr\u00e9er un objet de type  CDVPOI  puis de le sauver  \n CDVPOI _newPOI = new CDVPOI();\n                         _newPOI.setName( My POI   + (pois.size()+1));\n                         _newPOI.setDescription( Description of my POI   + (pois.size()+1));\n                         _newPOI.setLat(48.8834611 + Math.random());\n                         _newPOI.setLng(2.2652248 + Math.random());\n                         _newPOI.setLink( bicycling );\n                         _newPOI.setChronoMaps(new ArrayList String (Arrays.asList( time5 ,  time10 ,  time15 )));\n\n\n\n       new CDVManager.CreatePOITask(_newPOI, new CDVManager.POIResponseHandler() {\n\n                                   @Override\n                                   public void result(CDVException e2, CDVPOI poi) {\n                                       if (e2 != null   e2.getNativeException() == null) {\n                                           System.out.println( Create POI Error :   + e2.getErrorMessage());\n                                       } else if (e2 != null   e2.getNativeException() != null) {\n                                           e2.getNativeException().printStackTrace();\n                                       } else {\n                                           System.out.println( POI created   + poi.dictionary());\n\n                                       }\n                                   }\n                               }).execute();", 
            "title": "Cr\u00e9er un POI"
        }, 
        {
            "location": "/poi/#recuperer-les-pois-existants", 
            "text": "new CDVManager.GetPOIsTask(new CDVManager.POIsResponseHandler() {\n            @Override\n            public void result(CDVException e, ArrayList CDVPOI  pois) {\n                if (e != null   e.getNativeException() == null) {\n                    System.out.println( Get POIs Error :   + e.getErrorMessage());\n                } else if (e != null   e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println(pois.size() +   POIs );\n                }}}).execute();", 
            "title": "R\u00e9cup\u00e9rer les POIs existants"
        }, 
        {
            "location": "/poi/#supprimer-un-poi", 
            "text": "new CDVManager.DeletePOITask(existingPoi, new CDVManager.NoResponseHandler() {\n            @Override\n            public void result(CDVException e) {\n                if (e != null   e.getNativeException() == null) {\n                    System.out.println( Delete POI Error :   + e.getErrorMessage());\n                } else if (e != null   e.getNativeException() != null) {\n                    e.getNativeException().printStackTrace();\n                } else {\n                    System.out.println( POI deleted );\n                }\n            }\n        }).execute();", 
            "title": "Supprimer un POI"
        }
    ]
}